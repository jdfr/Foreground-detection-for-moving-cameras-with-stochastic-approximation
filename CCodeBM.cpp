/* Generated by Cython 0.28.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_2"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__CCodeBM
#define __PYX_HAVE_API__CCodeBM
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "BMArgs.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "CCodeBM.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_7CCodeBM_ModelBM;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "CCodeBM.pyx":90
 * 
 * #FROM createBM.m
 * cdef class ModelBM:             # <<<<<<<<<<<<<<
 *   cdef public str Log
 *   cdef bytes LogBytes
 */
struct __pyx_obj_7CCodeBM_ModelBM {
  PyObject_HEAD
  PyObject *Log;
  PyObject *LogBytes;
  char *LogCharPtr;
  PyObject *shapeArg2Update;
  double Epsilon;
  double H;
  double Den;
  int NumPatterns;
  int NumCompGauss;
  int NumCompUnif;
  int NumComp;
  int Z;
  int CurrentFrame;
  int KernelProcesses;
  int NumImageRows;
  int NumImageColumns;
  int Dimension;
  PyArrayObject *Min;
  PyArrayObject *Max;
  PyArrayObject *Noise;
  PyArrayObject *Counter;
  PyArrayObject *Pi;
  PyArrayObject *LogDetC;
  PyArrayObject *Mu;
  PyArrayObject *MuFore;
  PyArrayObject *C;
  PyArrayObject *InvC;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'cython' */

/* Module declarations from 'CCodeBM' */
static PyTypeObject *__pyx_ptype_7CCodeBM_ModelBM = 0;
static bool __pyx_f_7CCodeBM_badArray(PyArrayObject *); /*proto*/
static PyObject *__pyx_f_7CCodeBM___pyx_unpickle_ModelBM__set_state(struct __pyx_obj_7CCodeBM_ModelBM *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "CCodeBM"
extern int __pyx_module_is_main_CCodeBM;
int __pyx_module_is_main_CCodeBM = 0;

/* Implementation of 'CCodeBM' */
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_F[] = "F";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_arg0[] = "arg0";
static const char __pyx_k_arg1[] = "arg1";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dims[] = "dims";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_CCodeBM[] = "CCodeBM";
static const char __pyx_k_upright[] = "upright";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_objgridX[] = "objgridX";
static const char __pyx_k_objgridY[] = "objgridY";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_tam_cols[] = "tam_cols";
static const char __pyx_k_tam_rows[] = "tam_rows";
static const char __pyx_k_temp_txt[] = "temp.txt";
static const char __pyx_k_nchannels[] = "nchannels";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_frameshape[] = "frameshape";
static const char __pyx_k_minHessian[] = "minHessian";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_wantOutput[] = "wantOutput";
static const char __pyx_k_CCodeBM_pyx[] = "CCodeBM.pyx";
static const char __pyx_k_FirstFrames[] = "FirstFrames";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_tam_objgrid[] = "tam_objgrid";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_ransacReproj[] = "ransacReproj";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_tam_cols_ext[] = "tam_cols_ext";
static const char __pyx_k_tam_cols_ini[] = "tam_cols_ini";
static const char __pyx_k_tam_rows_ext[] = "tam_rows_ext";
static const char __pyx_k_tam_rows_ini[] = "tam_rows_ini";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_ModelBM[] = "__pyx_unpickle_ModelBM";
static const char __pyx_k_C_MUST_BE_A_FORTRAN_ARRAY[] = "C MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_R_MUST_BE_A_FORTRAN_ARRAY[] = "R MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Mu_MUST_BE_A_FORTRAN_ARRAY[] = "Mu MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Pi_MUST_BE_A_FORTRAN_ARRAY[] = "Pi MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Max_MUST_BE_A_FORTRAN_ARRAY[] = "Max MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Min_MUST_BE_A_FORTRAN_ARRAY[] = "Min MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_arg0_MUST_BE_A_FORTRAN_ARRAY[] = "arg0 MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_arg1_MUST_BE_A_FORTRAN_ARRAY[] = "arg1 MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Noise_MUST_BE_A_FORTRAN_ARRAY[] = "Noise MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_extrae_transformacion_BF2_PYX[] = "extrae_transformacion_BF2_PYX";
static const char __pyx_k_MuFore_MUST_BE_A_FORTRAN_ARRAY[] = "MuFore MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Counter_MUST_BE_A_FORTRAN_ARRAY[] = "Counter MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_LogDetC_MUST_BE_A_FORTRAN_ARRAY[] = "LogDetC MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_FirstFrames_MUST_BE_A_FORTRAN_AR[] = "FirstFrames MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Incompatible_checksums_s_vs_0x09[] = "Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_objgridX_MUST_BE_A_FORTRAN_ARRAY[] = "objgridX MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_objgridY_MUST_BE_A_FORTRAN_ARRAY[] = "objgridY MUST BE A FORTRAN ARRAY!!!!";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_CCodeBM;
static PyObject *__pyx_kp_s_CCodeBM_pyx;
static PyObject *__pyx_kp_s_C_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_Counter_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_FirstFrames;
static PyObject *__pyx_kp_s_FirstFrames_MUST_BE_A_FORTRAN_AR;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x09;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_LogDetC_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_Max_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_Min_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_MuFore_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_Mu_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_s_Noise_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Pi_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_kp_s_R_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_arg0;
static PyObject *__pyx_kp_s_arg0_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_arg1;
static PyObject *__pyx_kp_s_arg1_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dims;
static PyObject *__pyx_n_s_extrae_transformacion_BF2_PYX;
static PyObject *__pyx_n_s_frameshape;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_minHessian;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nchannels;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_objgridX;
static PyObject *__pyx_kp_s_objgridX_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_objgridY;
static PyObject *__pyx_kp_s_objgridY_MUST_BE_A_FORTRAN_ARRAY;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_ModelBM;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ransacReproj;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_tam_cols;
static PyObject *__pyx_n_s_tam_cols_ext;
static PyObject *__pyx_n_s_tam_cols_ini;
static PyObject *__pyx_n_s_tam_objgrid;
static PyObject *__pyx_n_s_tam_rows;
static PyObject *__pyx_n_s_tam_rows_ext;
static PyObject *__pyx_n_s_tam_rows_ini;
static PyObject *__pyx_kp_s_temp_txt;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upright;
static PyObject *__pyx_n_s_wantOutput;
static int __pyx_pf_7CCodeBM_7ModelBM___init__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, bool __pyx_v_init, PyObject *__pyx_v_frameshape); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2clone(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_4initializeBM_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_FirstFrames); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_6updateBM_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_FirstFrames, bool __pyx_v_wantOutput); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_8aplica_transformacion6_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_objgridX, PyArrayObject *__pyx_v_objgridY, PyArrayObject *__pyx_v_R, int __pyx_v_tam_cols, int __pyx_v_tam_rows, int __pyx_v_tam_objgrid, int __pyx_v_tam_cols_ini, int __pyx_v_tam_rows_ini, int __pyx_v_nchannels); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Log___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Log_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Log_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7Epsilon___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7Epsilon_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1H___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_1H_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Den___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Den_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_11NumPatterns___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_11NumPatterns_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7NumComp___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7NumComp_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1Z___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_1Z_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12NumImageRows___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_12NumImageRows_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_9Dimension___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_9Dimension_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Min___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Min_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Min_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Max___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Max_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_3Max_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_5Noise___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_5Noise_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_5Noise_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7Counter___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7Counter_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7Counter_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2Pi___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_2Pi_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_2Pi_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7LogDetC___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2Mu___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_2Mu_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_2Mu_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_6MuFore___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_6MuFore_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_6MuFore_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1C___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_1C_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_1C_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_4InvC___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_4InvC_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7CCodeBM_7ModelBM_4InvC_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_10__reduce_cython__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12__setstate_cython__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7CCodeBM_extrae_transformacion_BF2_PYX(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_arg0, PyArrayObject *__pyx_v_arg1, bool __pyx_v_upright, int __pyx_v_minHessian, double __pyx_v_ransacReproj, int __pyx_v_tam_cols, int __pyx_v_tam_rows, int __pyx_v_tam_cols_ext, int __pyx_v_tam_rows_ext); /* proto */
static PyObject *__pyx_pf_7CCodeBM_2__pyx_unpickle_ModelBM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7CCodeBM_ModelBM(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_10392827;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
/* Late includes */

/* "CCodeBM.pyx":104
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']
 * 
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[5]
 *     if init:
 */

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_init;
  PyObject *__pyx_v_frameshape = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_init,&__pyx_n_s_frameshape,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_tuple_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_init);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameshape);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_init = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_init == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L3_error)
    } else {
      __pyx_v_init = ((bool)1);
    }
    __pyx_v_frameshape = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_frameshape), (&PyTuple_Type), 1, "frameshape", 1))) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM___init__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), __pyx_v_init, __pyx_v_frameshape);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM___init__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, bool __pyx_v_init, PyObject *__pyx_v_frameshape) {
  npy_intp __pyx_v_dims[5];
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "CCodeBM.pyx":106
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):
 *     cdef cnp.npy_intp dims[5]
 *     if init:             # <<<<<<<<<<<<<<
 *       # R.M.Luque and Ezequiel Lopez-Rubio -- February 2011
 *       self.NumImageRows = frameshape[0]
 */
  __pyx_t_1 = (__pyx_v_init != 0);
  if (__pyx_t_1) {

    /* "CCodeBM.pyx":108
 *     if init:
 *       # R.M.Luque and Ezequiel Lopez-Rubio -- February 2011
 *       self.NumImageRows = frameshape[0]             # <<<<<<<<<<<<<<
 *       self.NumImageColumns = frameshape[1]
 *       self.Dimension = frameshape[2]
 */
    if (unlikely(__pyx_v_frameshape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 108, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_frameshape, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->NumImageRows = __pyx_t_3;

    /* "CCodeBM.pyx":109
 *       # R.M.Luque and Ezequiel Lopez-Rubio -- February 2011
 *       self.NumImageRows = frameshape[0]
 *       self.NumImageColumns = frameshape[1]             # <<<<<<<<<<<<<<
 *       self.Dimension = frameshape[2]
 *       self.shapeArg2Update = (self.NumImageRows, self.NumImageColumns, self.NumComp)
 */
    if (unlikely(__pyx_v_frameshape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_frameshape, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->NumImageColumns = __pyx_t_3;

    /* "CCodeBM.pyx":110
 *       self.NumImageRows = frameshape[0]
 *       self.NumImageColumns = frameshape[1]
 *       self.Dimension = frameshape[2]             # <<<<<<<<<<<<<<
 *       self.shapeArg2Update = (self.NumImageRows, self.NumImageColumns, self.NumComp)
 * 
 */
    if (unlikely(__pyx_v_frameshape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 110, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_frameshape, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->Dimension = __pyx_t_3;

    /* "CCodeBM.pyx":111
 *       self.NumImageColumns = frameshape[1]
 *       self.Dimension = frameshape[2]
 *       self.shapeArg2Update = (self.NumImageRows, self.NumImageColumns, self.NumComp)             # <<<<<<<<<<<<<<
 * 
 *       # Epsilon is the step size which regulates how quick the learning process is
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageRows); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageColumns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->NumComp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->shapeArg2Update);
    __Pyx_DECREF(__pyx_v_self->shapeArg2Update);
    __pyx_v_self->shapeArg2Update = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":115
 *       # Epsilon is the step size which regulates how quick the learning process is
 *       # Valid values are shown in the paper
 *       self.Epsilon = 0.01             # <<<<<<<<<<<<<<
 * 
 *       self.NumPatterns = 100# Number of used patterns to initilise the model
 */
    __pyx_v_self->Epsilon = 0.01;

    /* "CCodeBM.pyx":117
 *       self.Epsilon = 0.01
 * 
 *       self.NumPatterns = 100# Number of used patterns to initilise the model             # <<<<<<<<<<<<<<
 *       self.H = 2 # h is a global smoothing parameter to compute the noise (by default is 2)
 *       self.NumCompGauss=1# Number of Gaussian distributions (it properly works with 1)
 */
    __pyx_v_self->NumPatterns = 0x64;

    /* "CCodeBM.pyx":118
 * 
 *       self.NumPatterns = 100# Number of used patterns to initilise the model
 *       self.H = 2 # h is a global smoothing parameter to compute the noise (by default is 2)             # <<<<<<<<<<<<<<
 *       self.NumCompGauss=1# Number of Gaussian distributions (it properly works with 1)
 *       self.NumCompUnif=1# Number of uniform distributions (it properly works with 1)
 */
    __pyx_v_self->H = 2.0;

    /* "CCodeBM.pyx":119
 *       self.NumPatterns = 100# Number of used patterns to initilise the model
 *       self.H = 2 # h is a global smoothing parameter to compute the noise (by default is 2)
 *       self.NumCompGauss=1# Number of Gaussian distributions (it properly works with 1)             # <<<<<<<<<<<<<<
 *       self.NumCompUnif=1# Number of uniform distributions (it properly works with 1)
 *       self.Z = 250# Maximum number of consecutive frames in which a pixel belongs to the foreground class
 */
    __pyx_v_self->NumCompGauss = 1;

    /* "CCodeBM.pyx":120
 *       self.H = 2 # h is a global smoothing parameter to compute the noise (by default is 2)
 *       self.NumCompGauss=1# Number of Gaussian distributions (it properly works with 1)
 *       self.NumCompUnif=1# Number of uniform distributions (it properly works with 1)             # <<<<<<<<<<<<<<
 *       self.Z = 250# Maximum number of consecutive frames in which a pixel belongs to the foreground class
 *                     # It is assumed that it is computed offline by analising
 */
    __pyx_v_self->NumCompUnif = 1;

    /* "CCodeBM.pyx":121
 *       self.NumCompGauss=1# Number of Gaussian distributions (it properly works with 1)
 *       self.NumCompUnif=1# Number of uniform distributions (it properly works with 1)
 *       self.Z = 250# Maximum number of consecutive frames in which a pixel belongs to the foreground class             # <<<<<<<<<<<<<<
 *                     # It is assumed that it is computed offline by analising
 *                     # a subset of frames of the sequence (by default 250)
 */
    __pyx_v_self->Z = 0xFA;

    /* "CCodeBM.pyx":124
 *                     # It is assumed that it is computed offline by analising
 *                     # a subset of frames of the sequence (by default 250)
 *       self.CurrentFrame =1# Indicates the current frame (at the begining 1)             # <<<<<<<<<<<<<<
 *       self.KernelProcesses = 4 # Number of CPU kernels to parallel the process
 *       #self.Dimension=Dimension # Number of features of each pixel
 */
    __pyx_v_self->CurrentFrame = 1;

    /* "CCodeBM.pyx":125
 *                     # a subset of frames of the sequence (by default 250)
 *       self.CurrentFrame =1# Indicates the current frame (at the begining 1)
 *       self.KernelProcesses = 4 # Number of CPU kernels to parallel the process             # <<<<<<<<<<<<<<
 *       #self.Dimension=Dimension # Number of features of each pixel
 * 
 */
    __pyx_v_self->KernelProcesses = 4;

    /* "CCodeBM.pyx":128
 *       #self.Dimension=Dimension # Number of features of each pixel
 * 
 *       self.Den = 0             # <<<<<<<<<<<<<<
 * 
 *       self.NumComp=self.NumCompGauss+self.NumCompUnif # Total number of distributions
 */
    __pyx_v_self->Den = 0.0;

    /* "CCodeBM.pyx":130
 *       self.Den = 0
 * 
 *       self.NumComp=self.NumCompGauss+self.NumCompUnif # Total number of distributions             # <<<<<<<<<<<<<<
 *       self.Log = 'temp.txt' # Name of the log file
 *       self.LogBytes = bytes(self.Log)
 */
    __pyx_v_self->NumComp = (__pyx_v_self->NumCompGauss + __pyx_v_self->NumCompUnif);

    /* "CCodeBM.pyx":131
 * 
 *       self.NumComp=self.NumCompGauss+self.NumCompUnif # Total number of distributions
 *       self.Log = 'temp.txt' # Name of the log file             # <<<<<<<<<<<<<<
 *       self.LogBytes = bytes(self.Log)
 *       self.LogCharPtr = self.LogBytes
 */
    __Pyx_INCREF(__pyx_kp_s_temp_txt);
    __Pyx_GIVEREF(__pyx_kp_s_temp_txt);
    __Pyx_GOTREF(__pyx_v_self->Log);
    __Pyx_DECREF(__pyx_v_self->Log);
    __pyx_v_self->Log = __pyx_kp_s_temp_txt;

    /* "CCodeBM.pyx":132
 *       self.NumComp=self.NumCompGauss+self.NumCompUnif # Total number of distributions
 *       self.Log = 'temp.txt' # Name of the log file
 *       self.LogBytes = bytes(self.Log)             # <<<<<<<<<<<<<<
 *       self.LogCharPtr = self.LogBytes
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_self->Log); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->LogBytes);
    __Pyx_DECREF(__pyx_v_self->LogBytes);
    __pyx_v_self->LogBytes = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":133
 *       self.Log = 'temp.txt' # Name of the log file
 *       self.LogBytes = bytes(self.Log)
 *       self.LogCharPtr = self.LogBytes             # <<<<<<<<<<<<<<
 * 
 *       # Allocating space for work variables
 */
    if (unlikely(__pyx_v_self->LogBytes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 133, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->LogBytes); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
    __pyx_v_self->LogCharPtr = __pyx_t_7;

    /* "CCodeBM.pyx":136
 * 
 *       # Allocating space for work variables
 *       dims[0] = self.NumComp             # <<<<<<<<<<<<<<
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns
 */
    __pyx_t_3 = __pyx_v_self->NumComp;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":137
 *       # Allocating space for work variables
 *       dims[0] = self.NumComp
 *       dims[1] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[2] = self.NumImageColumns
 *       self.Pi = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":138
 *       dims[0] = self.NumComp
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.Pi = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[2]) = __pyx_t_3;

    /* "CCodeBM.pyx":139
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns
 *       self.Pi = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.Dimension
 *       self.Min = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_6 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->Pi);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Pi));
    __pyx_v_self->Pi = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":140
 *       dims[2] = self.NumImageColumns
 *       self.Pi = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension             # <<<<<<<<<<<<<<
 *       self.Min = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       self.Max = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->Dimension;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":141
 *       self.Pi = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 *       self.Min = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       self.Max = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 */
    __pyx_t_6 = PyArray_ZEROS(1, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->Min);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Min));
    __pyx_v_self->Min = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":142
 *       dims[0] = self.Dimension
 *       self.Min = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       self.Max = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss
 */
    __pyx_t_6 = PyArray_ZEROS(1, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->Max);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Max));
    __pyx_v_self->Max = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":143
 *       self.Min = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       self.Max = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension             # <<<<<<<<<<<<<<
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows
 */
    __pyx_t_3 = __pyx_v_self->Dimension;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":144
 *       self.Max = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss             # <<<<<<<<<<<<<<
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns
 */
    __pyx_t_3 = __pyx_v_self->NumCompGauss;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":145
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[3] = self.NumImageColumns
 *       self.Mu = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[2]) = __pyx_t_3;

    /* "CCodeBM.pyx":146
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.Mu = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[3]) = __pyx_t_3;

    /* "CCodeBM.pyx":147
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns
 *       self.Mu = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.Dimension
 *       dims[1] = self.Dimension
 */
    __pyx_t_6 = PyArray_ZEROS(4, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->Mu);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Mu));
    __pyx_v_self->Mu = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":148
 *       dims[3] = self.NumImageColumns
 *       self.Mu = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension             # <<<<<<<<<<<<<<
 *       dims[1] = self.Dimension
 *       dims[2] = self.NumCompGauss
 */
    __pyx_t_3 = __pyx_v_self->Dimension;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":149
 *       self.Mu = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 *       dims[1] = self.Dimension             # <<<<<<<<<<<<<<
 *       dims[2] = self.NumCompGauss
 *       dims[3] = self.NumImageRows
 */
    __pyx_t_3 = __pyx_v_self->Dimension;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":150
 *       dims[0] = self.Dimension
 *       dims[1] = self.Dimension
 *       dims[2] = self.NumCompGauss             # <<<<<<<<<<<<<<
 *       dims[3] = self.NumImageRows
 *       dims[4] = self.NumImageColumns
 */
    __pyx_t_3 = __pyx_v_self->NumCompGauss;
    (__pyx_v_dims[2]) = __pyx_t_3;

    /* "CCodeBM.pyx":151
 *       dims[1] = self.Dimension
 *       dims[2] = self.NumCompGauss
 *       dims[3] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[4] = self.NumImageColumns
 *       self.C = cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[3]) = __pyx_t_3;

    /* "CCodeBM.pyx":152
 *       dims[2] = self.NumCompGauss
 *       dims[3] = self.NumImageRows
 *       dims[4] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.C = cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       self.InvC=cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[4]) = __pyx_t_3;

    /* "CCodeBM.pyx":153
 *       dims[3] = self.NumImageRows
 *       dims[4] = self.NumImageColumns
 *       self.C = cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       self.InvC=cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumCompGauss
 */
    __pyx_t_6 = PyArray_ZEROS(5, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->C);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->C));
    __pyx_v_self->C = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":154
 *       dims[4] = self.NumImageColumns
 *       self.C = cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       self.InvC=cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.NumCompGauss
 *       dims[1] = self.NumImageRows
 */
    __pyx_t_6 = PyArray_ZEROS(5, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->InvC);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->InvC));
    __pyx_v_self->InvC = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":155
 *       self.C = cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       self.InvC=cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumCompGauss             # <<<<<<<<<<<<<<
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns
 */
    __pyx_t_3 = __pyx_v_self->NumCompGauss;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":156
 *       self.InvC=cnp.PyArray_ZEROS(5, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumCompGauss
 *       dims[1] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[2] = self.NumImageColumns
 *       self.LogDetC = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":157
 *       dims[0] = self.NumCompGauss
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.LogDetC = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[2]) = __pyx_t_3;

    /* "CCodeBM.pyx":158
 *       dims[1] = self.NumImageRows
 *       dims[2] = self.NumImageColumns
 *       self.LogDetC = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss
 */
    __pyx_t_6 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->LogDetC);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->LogDetC));
    __pyx_v_self->LogDetC = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":159
 *       dims[2] = self.NumImageColumns
 *       self.LogDetC = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension             # <<<<<<<<<<<<<<
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows
 */
    __pyx_t_3 = __pyx_v_self->Dimension;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":160
 *       self.LogDetC = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss             # <<<<<<<<<<<<<<
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns
 */
    __pyx_t_3 = __pyx_v_self->NumCompGauss;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":161
 *       dims[0] = self.Dimension
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[3] = self.NumImageColumns
 *       self.MuFore = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[2]) = __pyx_t_3;

    /* "CCodeBM.pyx":162
 *       dims[1] = self.NumCompGauss
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.MuFore = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumImageRows
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[3]) = __pyx_t_3;

    /* "CCodeBM.pyx":163
 *       dims[2] = self.NumImageRows
 *       dims[3] = self.NumImageColumns
 *       self.MuFore = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       dims[0] = self.NumImageRows
 *       dims[1] = self.NumImageColumns
 */
    __pyx_t_6 = PyArray_ZEROS(4, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->MuFore);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->MuFore));
    __pyx_v_self->MuFore = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":164
 *       dims[3] = self.NumImageColumns
 *       self.MuFore = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumImageRows             # <<<<<<<<<<<<<<
 *       dims[1] = self.NumImageColumns
 *       self.Counter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 */
    __pyx_t_3 = __pyx_v_self->NumImageRows;
    (__pyx_v_dims[0]) = __pyx_t_3;

    /* "CCodeBM.pyx":165
 *       self.MuFore = cnp.PyArray_ZEROS(4, dims, cnp.NPY_FLOAT64, 1)
 *       dims[0] = self.NumImageRows
 *       dims[1] = self.NumImageColumns             # <<<<<<<<<<<<<<
 *       self.Counter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 * 
 */
    __pyx_t_3 = __pyx_v_self->NumImageColumns;
    (__pyx_v_dims[1]) = __pyx_t_3;

    /* "CCodeBM.pyx":166
 *       dims[0] = self.NumImageRows
 *       dims[1] = self.NumImageColumns
 *       self.Counter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 * 
 *   def clone(self):
 */
    __pyx_t_6 = PyArray_ZEROS(2, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->Counter);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->Counter));
    __pyx_v_self->Counter = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "CCodeBM.pyx":106
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):
 *     cdef cnp.npy_intp dims[5]
 *     if init:             # <<<<<<<<<<<<<<
 *       # R.M.Luque and Ezequiel Lopez-Rubio -- February 2011
 *       self.NumImageRows = frameshape[0]
 */
  }

  /* "CCodeBM.pyx":104
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']
 * 
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[5]
 *     if init:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CCodeBM.ModelBM.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":168
 *       self.Counter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 * 
 *   def clone(self):             # <<<<<<<<<<<<<<
 *     cdef ModelBM model = ModelBM(init=False)
 *     model.NumImageRows = self.NumImageRows
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2clone(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2clone(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_model = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  char *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "CCodeBM.pyx":169
 * 
 *   def clone(self):
 *     cdef ModelBM model = ModelBM(init=False)             # <<<<<<<<<<<<<<
 *     model.NumImageRows = self.NumImageRows
 *     model.NumImageColumns = self.NumImageColumns
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_init, Py_False) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7CCodeBM_ModelBM), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_model = ((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":170
 *   def clone(self):
 *     cdef ModelBM model = ModelBM(init=False)
 *     model.NumImageRows = self.NumImageRows             # <<<<<<<<<<<<<<
 *     model.NumImageColumns = self.NumImageColumns
 *     model.Dimension = self.Dimension
 */
  __pyx_t_3 = __pyx_v_self->NumImageRows;
  __pyx_v_model->NumImageRows = __pyx_t_3;

  /* "CCodeBM.pyx":171
 *     cdef ModelBM model = ModelBM(init=False)
 *     model.NumImageRows = self.NumImageRows
 *     model.NumImageColumns = self.NumImageColumns             # <<<<<<<<<<<<<<
 *     model.Dimension = self.Dimension
 *     model.shapeArg2Update = self.shapeArg2Update
 */
  __pyx_t_3 = __pyx_v_self->NumImageColumns;
  __pyx_v_model->NumImageColumns = __pyx_t_3;

  /* "CCodeBM.pyx":172
 *     model.NumImageRows = self.NumImageRows
 *     model.NumImageColumns = self.NumImageColumns
 *     model.Dimension = self.Dimension             # <<<<<<<<<<<<<<
 *     model.shapeArg2Update = self.shapeArg2Update
 * 
 */
  __pyx_t_3 = __pyx_v_self->Dimension;
  __pyx_v_model->Dimension = __pyx_t_3;

  /* "CCodeBM.pyx":173
 *     model.NumImageColumns = self.NumImageColumns
 *     model.Dimension = self.Dimension
 *     model.shapeArg2Update = self.shapeArg2Update             # <<<<<<<<<<<<<<
 * 
 *     # Epsilon is the step size which regulates how quick the learning process is
 */
  __pyx_t_2 = __pyx_v_self->shapeArg2Update;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->shapeArg2Update);
  __Pyx_DECREF(__pyx_v_model->shapeArg2Update);
  __pyx_v_model->shapeArg2Update = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":177
 *     # Epsilon is the step size which regulates how quick the learning process is
 *     # Valid values are shown in the paper
 *     model.Epsilon = self.Epsilon             # <<<<<<<<<<<<<<
 * 
 *     model.NumPatterns = self.NumPatterns# Number of used patterns to initilise the model
 */
  __pyx_t_4 = __pyx_v_self->Epsilon;
  __pyx_v_model->Epsilon = __pyx_t_4;

  /* "CCodeBM.pyx":179
 *     model.Epsilon = self.Epsilon
 * 
 *     model.NumPatterns = self.NumPatterns# Number of used patterns to initilise the model             # <<<<<<<<<<<<<<
 *     model.H = self.H # h is a global smoothing parameter to compute the noise (by default is 2)
 *     model.NumCompGauss=self.NumCompGauss# Number of Gaussian distributions (it properly works with 1)
 */
  __pyx_t_3 = __pyx_v_self->NumPatterns;
  __pyx_v_model->NumPatterns = __pyx_t_3;

  /* "CCodeBM.pyx":180
 * 
 *     model.NumPatterns = self.NumPatterns# Number of used patterns to initilise the model
 *     model.H = self.H # h is a global smoothing parameter to compute the noise (by default is 2)             # <<<<<<<<<<<<<<
 *     model.NumCompGauss=self.NumCompGauss# Number of Gaussian distributions (it properly works with 1)
 *     model.NumCompUnif=self.NumCompUnif# Number of uniform distributions (it properly works with 1)
 */
  __pyx_t_4 = __pyx_v_self->H;
  __pyx_v_model->H = __pyx_t_4;

  /* "CCodeBM.pyx":181
 *     model.NumPatterns = self.NumPatterns# Number of used patterns to initilise the model
 *     model.H = self.H # h is a global smoothing parameter to compute the noise (by default is 2)
 *     model.NumCompGauss=self.NumCompGauss# Number of Gaussian distributions (it properly works with 1)             # <<<<<<<<<<<<<<
 *     model.NumCompUnif=self.NumCompUnif# Number of uniform distributions (it properly works with 1)
 *     model.Z = self.Z# Maximum number of consecutive frames in which a pixel belongs to the foreground class
 */
  __pyx_t_3 = __pyx_v_self->NumCompGauss;
  __pyx_v_model->NumCompGauss = __pyx_t_3;

  /* "CCodeBM.pyx":182
 *     model.H = self.H # h is a global smoothing parameter to compute the noise (by default is 2)
 *     model.NumCompGauss=self.NumCompGauss# Number of Gaussian distributions (it properly works with 1)
 *     model.NumCompUnif=self.NumCompUnif# Number of uniform distributions (it properly works with 1)             # <<<<<<<<<<<<<<
 *     model.Z = self.Z# Maximum number of consecutive frames in which a pixel belongs to the foreground class
 *                   # It is assumed that it is computed offline by analising
 */
  __pyx_t_3 = __pyx_v_self->NumCompUnif;
  __pyx_v_model->NumCompUnif = __pyx_t_3;

  /* "CCodeBM.pyx":183
 *     model.NumCompGauss=self.NumCompGauss# Number of Gaussian distributions (it properly works with 1)
 *     model.NumCompUnif=self.NumCompUnif# Number of uniform distributions (it properly works with 1)
 *     model.Z = self.Z# Maximum number of consecutive frames in which a pixel belongs to the foreground class             # <<<<<<<<<<<<<<
 *                   # It is assumed that it is computed offline by analising
 *                   # a subset of frames of the sequence (by default 250)
 */
  __pyx_t_3 = __pyx_v_self->Z;
  __pyx_v_model->Z = __pyx_t_3;

  /* "CCodeBM.pyx":186
 *                   # It is assumed that it is computed offline by analising
 *                   # a subset of frames of the sequence (by default 250)
 *     model.CurrentFrame =self.CurrentFrame# Indicates the current frame (at the begining 1)             # <<<<<<<<<<<<<<
 *     model.KernelProcesses = self.KernelProcesses # Number of CPU kernels to parallel the process
 *     #model.Dimension=self.Dimension # Number of features of each pixel
 */
  __pyx_t_3 = __pyx_v_self->CurrentFrame;
  __pyx_v_model->CurrentFrame = __pyx_t_3;

  /* "CCodeBM.pyx":187
 *                   # a subset of frames of the sequence (by default 250)
 *     model.CurrentFrame =self.CurrentFrame# Indicates the current frame (at the begining 1)
 *     model.KernelProcesses = self.KernelProcesses # Number of CPU kernels to parallel the process             # <<<<<<<<<<<<<<
 *     #model.Dimension=self.Dimension # Number of features of each pixel
 * 
 */
  __pyx_t_3 = __pyx_v_self->KernelProcesses;
  __pyx_v_model->KernelProcesses = __pyx_t_3;

  /* "CCodeBM.pyx":190
 *     #model.Dimension=self.Dimension # Number of features of each pixel
 * 
 *     model.NumComp=self.NumComp# Total number of distributions             # <<<<<<<<<<<<<<
 *     model.Log = self.Log # Name of the log file
 *     model.LogBytes = self.LogBytes
 */
  __pyx_t_3 = __pyx_v_self->NumComp;
  __pyx_v_model->NumComp = __pyx_t_3;

  /* "CCodeBM.pyx":191
 * 
 *     model.NumComp=self.NumComp# Total number of distributions
 *     model.Log = self.Log # Name of the log file             # <<<<<<<<<<<<<<
 *     model.LogBytes = self.LogBytes
 *     model.LogCharPtr = model.LogBytes
 */
  __pyx_t_2 = __pyx_v_self->Log;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->Log);
  __Pyx_DECREF(__pyx_v_model->Log);
  __pyx_v_model->Log = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":192
 *     model.NumComp=self.NumComp# Total number of distributions
 *     model.Log = self.Log # Name of the log file
 *     model.LogBytes = self.LogBytes             # <<<<<<<<<<<<<<
 *     model.LogCharPtr = model.LogBytes
 * 
 */
  __pyx_t_2 = __pyx_v_self->LogBytes;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->LogBytes);
  __Pyx_DECREF(__pyx_v_model->LogBytes);
  __pyx_v_model->LogBytes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":193
 *     model.Log = self.Log # Name of the log file
 *     model.LogBytes = self.LogBytes
 *     model.LogCharPtr = model.LogBytes             # <<<<<<<<<<<<<<
 * 
 *     # Allocating space for work variables
 */
  if (unlikely(__pyx_v_model->LogBytes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 193, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsWritableString(__pyx_v_model->LogBytes); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_v_model->LogCharPtr = __pyx_t_5;

  /* "CCodeBM.pyx":196
 * 
 *     # Allocating space for work variables
 *     model.Pi=self.Pi.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.Min=self.Min.copy(order='F')
 *     model.Max=self.Max.copy(order='F')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Pi), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_model->Pi);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Pi));
  __pyx_v_model->Pi = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "CCodeBM.pyx":197
 *     # Allocating space for work variables
 *     model.Pi=self.Pi.copy(order='F')
 *     model.Min=self.Min.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.Max=self.Max.copy(order='F')
 *     model.Den=self.Den
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Min), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->Min);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Min));
  __pyx_v_model->Min = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":198
 *     model.Pi=self.Pi.copy(order='F')
 *     model.Min=self.Min.copy(order='F')
 *     model.Max=self.Max.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.Den=self.Den
 *     model.Mu=self.Mu.copy(order='F')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Max), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_model->Max);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Max));
  __pyx_v_model->Max = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "CCodeBM.pyx":199
 *     model.Min=self.Min.copy(order='F')
 *     model.Max=self.Max.copy(order='F')
 *     model.Den=self.Den             # <<<<<<<<<<<<<<
 *     model.Mu=self.Mu.copy(order='F')
 *     model.C=self.C.copy(order='F')
 */
  __pyx_t_4 = __pyx_v_self->Den;
  __pyx_v_model->Den = __pyx_t_4;

  /* "CCodeBM.pyx":200
 *     model.Max=self.Max.copy(order='F')
 *     model.Den=self.Den
 *     model.Mu=self.Mu.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.C=self.C.copy(order='F')
 *     model.InvC=self.InvC.copy(order='F')
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Mu), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->Mu);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Mu));
  __pyx_v_model->Mu = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":201
 *     model.Den=self.Den
 *     model.Mu=self.Mu.copy(order='F')
 *     model.C=self.C.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.InvC=self.InvC.copy(order='F')
 *     model.LogDetC=self.LogDetC.copy(order='F')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->C), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_model->C);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->C));
  __pyx_v_model->C = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "CCodeBM.pyx":202
 *     model.Mu=self.Mu.copy(order='F')
 *     model.C=self.C.copy(order='F')
 *     model.InvC=self.InvC.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.LogDetC=self.LogDetC.copy(order='F')
 *     model.MuFore=self.MuFore.copy(order='F')
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->InvC), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->InvC);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->InvC));
  __pyx_v_model->InvC = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":203
 *     model.C=self.C.copy(order='F')
 *     model.InvC=self.InvC.copy(order='F')
 *     model.LogDetC=self.LogDetC.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.MuFore=self.MuFore.copy(order='F')
 *     model.Counter=self.Counter.copy(order='F')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->LogDetC), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_model->LogDetC);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->LogDetC));
  __pyx_v_model->LogDetC = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "CCodeBM.pyx":204
 *     model.InvC=self.InvC.copy(order='F')
 *     model.LogDetC=self.LogDetC.copy(order='F')
 *     model.MuFore=self.MuFore.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.Counter=self.Counter.copy(order='F')
 *     model.Noise=self.Noise.copy(order='F')
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->MuFore), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->MuFore);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->MuFore));
  __pyx_v_model->MuFore = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":205
 *     model.LogDetC=self.LogDetC.copy(order='F')
 *     model.MuFore=self.MuFore.copy(order='F')
 *     model.Counter=self.Counter.copy(order='F')             # <<<<<<<<<<<<<<
 *     model.Noise=self.Noise.copy(order='F')
 *     return model
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Counter), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_model->Counter);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Counter));
  __pyx_v_model->Counter = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "CCodeBM.pyx":206
 *     model.MuFore=self.MuFore.copy(order='F')
 *     model.Counter=self.Counter.copy(order='F')
 *     model.Noise=self.Noise.copy(order='F')             # <<<<<<<<<<<<<<
 *     return model
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->Noise), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_model->Noise);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->Noise));
  __pyx_v_model->Noise = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":207
 *     model.Counter=self.Counter.copy(order='F')
 *     model.Noise=self.Noise.copy(order='F')
 *     return model             # <<<<<<<<<<<<<<
 * 
 *   def initializeBM_PYX(self,cnp.ndarray FirstFrames):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __pyx_r = ((PyObject *)__pyx_v_model);
  goto __pyx_L0;

  /* "CCodeBM.pyx":168
 *       self.Counter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 * 
 *   def clone(self):             # <<<<<<<<<<<<<<
 *     cdef ModelBM model = ModelBM(init=False)
 *     model.NumImageRows = self.NumImageRows
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CCodeBM.ModelBM.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":209
 *     return model
 * 
 *   def initializeBM_PYX(self,cnp.ndarray FirstFrames):             # <<<<<<<<<<<<<<
 *     cdef Args_initializeBM_MEX args
 *     args.logFileName = self.LogCharPtr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_5initializeBM_PYX(PyObject *__pyx_v_self, PyObject *__pyx_v_FirstFrames); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_5initializeBM_PYX(PyObject *__pyx_v_self, PyObject *__pyx_v_FirstFrames) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeBM_PYX (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FirstFrames), __pyx_ptype_5numpy_ndarray, 1, "FirstFrames", 0))) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_4initializeBM_PYX(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyArrayObject *)__pyx_v_FirstFrames));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_4initializeBM_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_FirstFrames) {
  Args_initializeBM_MEX __pyx_v_args;
  PyObject *__pyx_v_shape = 0;
  int __pyx_v_s0;
  int __pyx_v_s1;
  int __pyx_v_s2;
  int __pyx_v_s3;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("initializeBM_PYX", 0);

  /* "CCodeBM.pyx":211
 *   def initializeBM_PYX(self,cnp.ndarray FirstFrames):
 *     cdef Args_initializeBM_MEX args
 *     args.logFileName = self.LogCharPtr             # <<<<<<<<<<<<<<
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)
 */
  __pyx_t_1 = __pyx_v_self->LogCharPtr;
  __pyx_v_args.logFileName = __pyx_t_1;

  /* "CCodeBM.pyx":212
 *     cdef Args_initializeBM_MEX args
 *     args.logFileName = self.LogCharPtr
 *     args.NumCompGauss = &(self.NumCompGauss)             # <<<<<<<<<<<<<<
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)
 */
  __pyx_v_args.NumCompGauss = (&__pyx_v_self->NumCompGauss);

  /* "CCodeBM.pyx":213
 *     args.logFileName = self.LogCharPtr
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)             # <<<<<<<<<<<<<<
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)
 */
  __pyx_v_args.CurrentFrame = (&__pyx_v_self->CurrentFrame);

  /* "CCodeBM.pyx":214
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)             # <<<<<<<<<<<<<<
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)
 */
  __pyx_v_args.NumComp = (&__pyx_v_self->NumComp);

  /* "CCodeBM.pyx":215
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)             # <<<<<<<<<<<<<<
 *     args.Den = &(self.Den)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_v_args.NumCompUnif = (&__pyx_v_self->NumCompUnif);

  /* "CCodeBM.pyx":216
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)             # <<<<<<<<<<<<<<
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_v_args.Den = (&__pyx_v_self->Den);

  /* "CCodeBM.pyx":217
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(__pyx_v_FirstFrames) != 0);
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 217, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":218
 *     args.Den = &(self.Den)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->Pi);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 218, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":219
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->Mu);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 219, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":220
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->MuFore);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 220, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":221
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->C);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 221, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":222
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     cdef tuple shape = (<object>FirstFrames).shape
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->Min);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 222, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":223
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->Max);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 223, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":224
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     cdef tuple shape = (<object>FirstFrames).shape             # <<<<<<<<<<<<<<
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FirstFrames), __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_v_shape = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CCodeBM.pyx":225
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]             # <<<<<<<<<<<<<<
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_s0 = __pyx_t_4;

  /* "CCodeBM.pyx":226
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]             # <<<<<<<<<<<<<<
 *     cdef int s2 = shape[2]
 *     cdef int s3 = shape[3]
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 226, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_s1 = __pyx_t_4;

  /* "CCodeBM.pyx":227
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]             # <<<<<<<<<<<<<<
 *     cdef int s3 = shape[3]
 *     args.secondArgDims[0] = s0
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_s2 = __pyx_t_4;

  /* "CCodeBM.pyx":228
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]
 *     cdef int s3 = shape[3]             # <<<<<<<<<<<<<<
 *     args.secondArgDims[0] = s0
 *     args.secondArgDims[1] = s1
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_s3 = __pyx_t_4;

  /* "CCodeBM.pyx":229
 *     cdef int s2 = shape[2]
 *     cdef int s3 = shape[3]
 *     args.secondArgDims[0] = s0             # <<<<<<<<<<<<<<
 *     args.secondArgDims[1] = s1
 *     args.secondArgDims[2] = s2
 */
  (__pyx_v_args.secondArgDims[0]) = __pyx_v_s0;

  /* "CCodeBM.pyx":230
 *     cdef int s3 = shape[3]
 *     args.secondArgDims[0] = s0
 *     args.secondArgDims[1] = s1             # <<<<<<<<<<<<<<
 *     args.secondArgDims[2] = s2
 *     args.secondArgDims[3] = s3
 */
  (__pyx_v_args.secondArgDims[1]) = __pyx_v_s1;

  /* "CCodeBM.pyx":231
 *     args.secondArgDims[0] = s0
 *     args.secondArgDims[1] = s1
 *     args.secondArgDims[2] = s2             # <<<<<<<<<<<<<<
 *     args.secondArgDims[3] = s3
 *     args.secondArgData = <cnp.float64_t *>FirstFrames.data
 */
  (__pyx_v_args.secondArgDims[2]) = __pyx_v_s2;

  /* "CCodeBM.pyx":232
 *     args.secondArgDims[1] = s1
 *     args.secondArgDims[2] = s2
 *     args.secondArgDims[3] = s3             # <<<<<<<<<<<<<<
 *     args.secondArgData = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 */
  (__pyx_v_args.secondArgDims[3]) = __pyx_v_s3;

  /* "CCodeBM.pyx":233
 *     args.secondArgDims[2] = s2
 *     args.secondArgDims[3] = s3
 *     args.secondArgData = <cnp.float64_t *>FirstFrames.data             # <<<<<<<<<<<<<<
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 */
  __pyx_v_args.secondArgData = ((__pyx_t_5numpy_float64_t *)__pyx_v_FirstFrames->data);

  /* "CCodeBM.pyx":234
 *     args.secondArgDims[3] = s3
 *     args.secondArgData = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data             # <<<<<<<<<<<<<<
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 */
  __pyx_v_args.Pi = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Pi->data);

  /* "CCodeBM.pyx":235
 *     args.secondArgData = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data             # <<<<<<<<<<<<<<
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data
 */
  __pyx_v_args.Mu = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Mu->data);

  /* "CCodeBM.pyx":236
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data             # <<<<<<<<<<<<<<
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.Min = <cnp.float64_t *>self.Min.data
 */
  __pyx_v_args.MuFore = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->MuFore->data);

  /* "CCodeBM.pyx":237
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data             # <<<<<<<<<<<<<<
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data
 */
  __pyx_v_args.C = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->C->data);

  /* "CCodeBM.pyx":238
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.Min = <cnp.float64_t *>self.Min.data             # <<<<<<<<<<<<<<
 *     args.Max = <cnp.float64_t *>self.Max.data
 *     initializeBM_MEX(&args)
 */
  __pyx_v_args.Min = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Min->data);

  /* "CCodeBM.pyx":239
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data             # <<<<<<<<<<<<<<
 *     initializeBM_MEX(&args)
 * 
 */
  __pyx_v_args.Max = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Max->data);

  /* "CCodeBM.pyx":240
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data
 *     initializeBM_MEX(&args)             # <<<<<<<<<<<<<<
 * 
 *   def updateBM_PYX(self, cnp.ndarray FirstFrames, bool wantOutput=True):
 */
  initializeBM_MEX((&__pyx_v_args));

  /* "CCodeBM.pyx":209
 *     return model
 * 
 *   def initializeBM_PYX(self,cnp.ndarray FirstFrames):             # <<<<<<<<<<<<<<
 *     cdef Args_initializeBM_MEX args
 *     args.logFileName = self.LogCharPtr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CCodeBM.ModelBM.initializeBM_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_shape);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":242
 *     initializeBM_MEX(&args)
 * 
 *   def updateBM_PYX(self, cnp.ndarray FirstFrames, bool wantOutput=True):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[3]
 *     cdef Args_updateBM_MEX args
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7updateBM_PYX(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7updateBM_PYX(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_FirstFrames = 0;
  bool __pyx_v_wantOutput;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBM_PYX (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_FirstFrames,&__pyx_n_s_wantOutput,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_FirstFrames)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wantOutput);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateBM_PYX") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_FirstFrames = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_wantOutput = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_wantOutput == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
    } else {
      __pyx_v_wantOutput = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateBM_PYX", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.updateBM_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FirstFrames), __pyx_ptype_5numpy_ndarray, 1, "FirstFrames", 0))) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_6updateBM_PYX(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), __pyx_v_FirstFrames, __pyx_v_wantOutput);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_6updateBM_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_FirstFrames, bool __pyx_v_wantOutput) {
  npy_intp __pyx_v_dims[3];
  Args_updateBM_MEX __pyx_v_args;
  PyArrayObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_shape = 0;
  int __pyx_v_s0;
  int __pyx_v_s1;
  int __pyx_v_s2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("updateBM_PYX", 0);

  /* "CCodeBM.pyx":247
 *     cdef cnp.ndarray arg1
 *     #cdef cnp.ndarray arg2 #THIS SEEMS UNUSED
 *     args.wantOutput = wantOutput             # <<<<<<<<<<<<<<
 *     args.logFileName = self.LogCharPtr
 *     args.NumImageRows = self.NumImageRows
 */
  __pyx_v_args.wantOutput = __pyx_v_wantOutput;

  /* "CCodeBM.pyx":248
 *     #cdef cnp.ndarray arg2 #THIS SEEMS UNUSED
 *     args.wantOutput = wantOutput
 *     args.logFileName = self.LogCharPtr             # <<<<<<<<<<<<<<
 *     args.NumImageRows = self.NumImageRows
 *     args.NumImageColumns = self.NumImageColumns
 */
  __pyx_t_1 = __pyx_v_self->LogCharPtr;
  __pyx_v_args.logFileName = __pyx_t_1;

  /* "CCodeBM.pyx":249
 *     args.wantOutput = wantOutput
 *     args.logFileName = self.LogCharPtr
 *     args.NumImageRows = self.NumImageRows             # <<<<<<<<<<<<<<
 *     args.NumImageColumns = self.NumImageColumns
 *     args.Dimension = self.Dimension
 */
  __pyx_t_2 = __pyx_v_self->NumImageRows;
  __pyx_v_args.NumImageRows = __pyx_t_2;

  /* "CCodeBM.pyx":250
 *     args.logFileName = self.LogCharPtr
 *     args.NumImageRows = self.NumImageRows
 *     args.NumImageColumns = self.NumImageColumns             # <<<<<<<<<<<<<<
 *     args.Dimension = self.Dimension
 *     args.NumCompGauss = &(self.NumCompGauss)
 */
  __pyx_t_2 = __pyx_v_self->NumImageColumns;
  __pyx_v_args.NumImageColumns = __pyx_t_2;

  /* "CCodeBM.pyx":251
 *     args.NumImageRows = self.NumImageRows
 *     args.NumImageColumns = self.NumImageColumns
 *     args.Dimension = self.Dimension             # <<<<<<<<<<<<<<
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)
 */
  __pyx_t_2 = __pyx_v_self->Dimension;
  __pyx_v_args.Dimension = __pyx_t_2;

  /* "CCodeBM.pyx":252
 *     args.NumImageColumns = self.NumImageColumns
 *     args.Dimension = self.Dimension
 *     args.NumCompGauss = &(self.NumCompGauss)             # <<<<<<<<<<<<<<
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)
 */
  __pyx_v_args.NumCompGauss = (&__pyx_v_self->NumCompGauss);

  /* "CCodeBM.pyx":253
 *     args.Dimension = self.Dimension
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)             # <<<<<<<<<<<<<<
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)
 */
  __pyx_v_args.CurrentFrame = (&__pyx_v_self->CurrentFrame);

  /* "CCodeBM.pyx":254
 *     args.NumCompGauss = &(self.NumCompGauss)
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)             # <<<<<<<<<<<<<<
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)
 */
  __pyx_v_args.NumComp = (&__pyx_v_self->NumComp);

  /* "CCodeBM.pyx":255
 *     args.CurrentFrame = &(self.CurrentFrame)
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)             # <<<<<<<<<<<<<<
 *     args.Den = &(self.Den)
 *     args.Z = &(self.Z)
 */
  __pyx_v_args.NumCompUnif = (&__pyx_v_self->NumCompUnif);

  /* "CCodeBM.pyx":256
 *     args.NumComp = &(self.NumComp)
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)             # <<<<<<<<<<<<<<
 *     args.Z = &(self.Z)
 *     args.Epsilon = &(self.Epsilon)
 */
  __pyx_v_args.Den = (&__pyx_v_self->Den);

  /* "CCodeBM.pyx":257
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)
 *     args.Z = &(self.Z)             # <<<<<<<<<<<<<<
 *     args.Epsilon = &(self.Epsilon)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_v_args.Z = (&__pyx_v_self->Z);

  /* "CCodeBM.pyx":258
 *     args.Den = &(self.Den)
 *     args.Z = &(self.Z)
 *     args.Epsilon = &(self.Epsilon)             # <<<<<<<<<<<<<<
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_v_args.Epsilon = (&__pyx_v_self->Epsilon);

  /* "CCodeBM.pyx":259
 *     args.Z = &(self.Z)
 *     args.Epsilon = &(self.Epsilon)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(__pyx_v_FirstFrames) != 0);
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 259, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":260
 *     args.Epsilon = &(self.Epsilon)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Pi);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 260, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":261
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Mu);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 261, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":262
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->MuFore);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 262, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":263
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->C);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 263, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":264
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->LogDetC);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 264, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":265
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Min);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 265, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":266
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Max);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 266, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":267
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Counter);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 267, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":268
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->Noise);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_4)) != 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 268, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":269
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data             # <<<<<<<<<<<<<<
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 */
  __pyx_v_args.arg1 = ((__pyx_t_5numpy_float64_t *)__pyx_v_FirstFrames->data);

  /* "CCodeBM.pyx":270
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data             # <<<<<<<<<<<<<<
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 */
  __pyx_v_args.Pi = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Pi->data);

  /* "CCodeBM.pyx":271
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data             # <<<<<<<<<<<<<<
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data
 */
  __pyx_v_args.Mu = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Mu->data);

  /* "CCodeBM.pyx":272
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data             # <<<<<<<<<<<<<<
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.LogDetC = <cnp.float64_t *>self.LogDetC.data
 */
  __pyx_v_args.MuFore = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->MuFore->data);

  /* "CCodeBM.pyx":273
 *     args.Mu = <cnp.float64_t *>self.Mu.data
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data             # <<<<<<<<<<<<<<
 *     args.LogDetC = <cnp.float64_t *>self.LogDetC.data
 *     args.Min = <cnp.float64_t *>self.Min.data
 */
  __pyx_v_args.C = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->C->data);

  /* "CCodeBM.pyx":274
 *     args.MuFore = <cnp.float64_t *>self.MuFore.data
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.LogDetC = <cnp.float64_t *>self.LogDetC.data             # <<<<<<<<<<<<<<
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data
 */
  __pyx_v_args.LogDetC = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->LogDetC->data);

  /* "CCodeBM.pyx":275
 *     args.C = <cnp.float64_t *>self.C.data
 *     args.LogDetC = <cnp.float64_t *>self.LogDetC.data
 *     args.Min = <cnp.float64_t *>self.Min.data             # <<<<<<<<<<<<<<
 *     args.Max = <cnp.float64_t *>self.Max.data
 *     args.Counter = <cnp.float64_t *>self.Counter.data
 */
  __pyx_v_args.Min = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Min->data);

  /* "CCodeBM.pyx":276
 *     args.LogDetC = <cnp.float64_t *>self.LogDetC.data
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data             # <<<<<<<<<<<<<<
 *     args.Counter = <cnp.float64_t *>self.Counter.data
 *     args.Noise = <cnp.float64_t *>self.Noise.data
 */
  __pyx_v_args.Max = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Max->data);

  /* "CCodeBM.pyx":277
 *     args.Min = <cnp.float64_t *>self.Min.data
 *     args.Max = <cnp.float64_t *>self.Max.data
 *     args.Counter = <cnp.float64_t *>self.Counter.data             # <<<<<<<<<<<<<<
 *     args.Noise = <cnp.float64_t *>self.Noise.data
 *     cdef tuple shape = (<object>FirstFrames).shape
 */
  __pyx_v_args.Counter = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Counter->data);

  /* "CCodeBM.pyx":278
 *     args.Max = <cnp.float64_t *>self.Max.data
 *     args.Counter = <cnp.float64_t *>self.Counter.data
 *     args.Noise = <cnp.float64_t *>self.Noise.data             # <<<<<<<<<<<<<<
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]
 */
  __pyx_v_args.Noise = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Noise->data);

  /* "CCodeBM.pyx":279
 *     args.Counter = <cnp.float64_t *>self.Counter.data
 *     args.Noise = <cnp.float64_t *>self.Noise.data
 *     cdef tuple shape = (<object>FirstFrames).shape             # <<<<<<<<<<<<<<
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FirstFrames), __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(PyTuple_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_v_shape = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "CCodeBM.pyx":280
 *     args.Noise = <cnp.float64_t *>self.Noise.data
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]             # <<<<<<<<<<<<<<
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 280, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_s0 = __pyx_t_2;

  /* "CCodeBM.pyx":281
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]             # <<<<<<<<<<<<<<
 *     cdef int s2 = shape[2]
 *     if wantOutput:
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 281, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_s1 = __pyx_t_2;

  /* "CCodeBM.pyx":282
 *     cdef int s0 = shape[0]
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]             # <<<<<<<<<<<<<<
 *     if wantOutput:
 *       dims[0] = s0
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 282, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_s2 = __pyx_t_2;

  /* "CCodeBM.pyx":283
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]
 *     if wantOutput:             # <<<<<<<<<<<<<<
 *       dims[0] = s0
 *       dims[1] = s1
 */
  __pyx_t_3 = (__pyx_v_wantOutput != 0);
  if (__pyx_t_3) {

    /* "CCodeBM.pyx":284
 *     cdef int s2 = shape[2]
 *     if wantOutput:
 *       dims[0] = s0             # <<<<<<<<<<<<<<
 *       dims[1] = s1
 *       dims[2] = s2
 */
    (__pyx_v_dims[0]) = __pyx_v_s0;

    /* "CCodeBM.pyx":285
 *     if wantOutput:
 *       dims[0] = s0
 *       dims[1] = s1             # <<<<<<<<<<<<<<
 *       dims[2] = s2
 *       arg1 = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
    (__pyx_v_dims[1]) = __pyx_v_s1;

    /* "CCodeBM.pyx":286
 *       dims[0] = s0
 *       dims[1] = s1
 *       dims[2] = s2             # <<<<<<<<<<<<<<
 *       arg1 = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       #arg2 = np.zeros(self.shapeArg2Update, dtype=np.float64, order='F') #THIS SEEMS UNUSED
 */
    (__pyx_v_dims[2]) = __pyx_v_s2;

    /* "CCodeBM.pyx":287
 *       dims[1] = s1
 *       dims[2] = s2
 *       arg1 = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *       #arg2 = np.zeros(self.shapeArg2Update, dtype=np.float64, order='F') #THIS SEEMS UNUSED
 *       args.oarg1 = <cnp.float64_t *>arg1.data
 */
    __pyx_t_4 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 287, __pyx_L1_error)
    __pyx_v_arg1 = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "CCodeBM.pyx":289
 *       arg1 = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *       #arg2 = np.zeros(self.shapeArg2Update, dtype=np.float64, order='F') #THIS SEEMS UNUSED
 *       args.oarg1 = <cnp.float64_t *>arg1.data             # <<<<<<<<<<<<<<
 *       #args.oarg2 = <cnp.float64_t *>arg2.data #THIS SEEMS UNUSED
 *     updateBM_MEX(&args)
 */
    __pyx_v_args.oarg1 = ((__pyx_t_5numpy_float64_t *)__pyx_v_arg1->data);

    /* "CCodeBM.pyx":283
 *     cdef int s1 = shape[1]
 *     cdef int s2 = shape[2]
 *     if wantOutput:             # <<<<<<<<<<<<<<
 *       dims[0] = s0
 *       dims[1] = s1
 */
  }

  /* "CCodeBM.pyx":291
 *       args.oarg1 = <cnp.float64_t *>arg1.data
 *       #args.oarg2 = <cnp.float64_t *>arg2.data #THIS SEEMS UNUSED
 *     updateBM_MEX(&args)             # <<<<<<<<<<<<<<
 *     if wantOutput:
 *       return arg1#, arg2 #THIS SEEMS UNUSED
 */
  updateBM_MEX((&__pyx_v_args));

  /* "CCodeBM.pyx":292
 *       #args.oarg2 = <cnp.float64_t *>arg2.data #THIS SEEMS UNUSED
 *     updateBM_MEX(&args)
 *     if wantOutput:             # <<<<<<<<<<<<<<
 *       return arg1#, arg2 #THIS SEEMS UNUSED
 * 
 */
  __pyx_t_3 = (__pyx_v_wantOutput != 0);
  if (__pyx_t_3) {

    /* "CCodeBM.pyx":293
 *     updateBM_MEX(&args)
 *     if wantOutput:
 *       return arg1#, arg2 #THIS SEEMS UNUSED             # <<<<<<<<<<<<<<
 * 
 *   def aplica_transformacion6_PYX(self, cnp.ndarray objgridX, cnp.ndarray objgridY, cnp.ndarray R, int tam_cols, int tam_rows, int tam_objgrid, int tam_cols_ini, int tam_rows_ini, int nchannels):
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_v_arg1)) { __Pyx_RaiseUnboundLocalError("arg1"); __PYX_ERR(0, 293, __pyx_L1_error) }
    __Pyx_INCREF(((PyObject *)__pyx_v_arg1));
    __pyx_r = ((PyObject *)__pyx_v_arg1);
    goto __pyx_L0;

    /* "CCodeBM.pyx":292
 *       #args.oarg2 = <cnp.float64_t *>arg2.data #THIS SEEMS UNUSED
 *     updateBM_MEX(&args)
 *     if wantOutput:             # <<<<<<<<<<<<<<
 *       return arg1#, arg2 #THIS SEEMS UNUSED
 * 
 */
  }

  /* "CCodeBM.pyx":242
 *     initializeBM_MEX(&args)
 * 
 *   def updateBM_PYX(self, cnp.ndarray FirstFrames, bool wantOutput=True):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[3]
 *     cdef Args_updateBM_MEX args
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CCodeBM.ModelBM.updateBM_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg1);
  __Pyx_XDECREF(__pyx_v_shape);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":295
 *       return arg1#, arg2 #THIS SEEMS UNUSED
 * 
 *   def aplica_transformacion6_PYX(self, cnp.ndarray objgridX, cnp.ndarray objgridY, cnp.ndarray R, int tam_cols, int tam_rows, int tam_objgrid, int tam_cols_ini, int tam_rows_ini, int nchannels):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[3]
 *     cdef Args_aplica_transformacion6_MEX args
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_9aplica_transformacion6_PYX(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_9aplica_transformacion6_PYX(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_objgridX = 0;
  PyArrayObject *__pyx_v_objgridY = 0;
  PyArrayObject *__pyx_v_R = 0;
  int __pyx_v_tam_cols;
  int __pyx_v_tam_rows;
  int __pyx_v_tam_objgrid;
  int __pyx_v_tam_cols_ini;
  int __pyx_v_tam_rows_ini;
  int __pyx_v_nchannels;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("aplica_transformacion6_PYX (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objgridX,&__pyx_n_s_objgridY,&__pyx_n_s_R,&__pyx_n_s_tam_cols,&__pyx_n_s_tam_rows,&__pyx_n_s_tam_objgrid,&__pyx_n_s_tam_cols_ini,&__pyx_n_s_tam_rows_ini,&__pyx_n_s_nchannels,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objgridX)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objgridY)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 1); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 2); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 3); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 4); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_objgrid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 5); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_cols_ini)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 6); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_rows_ini)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 7); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nchannels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, 8); __PYX_ERR(0, 295, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "aplica_transformacion6_PYX") < 0)) __PYX_ERR(0, 295, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_objgridX = ((PyArrayObject *)values[0]);
    __pyx_v_objgridY = ((PyArrayObject *)values[1]);
    __pyx_v_R = ((PyArrayObject *)values[2]);
    __pyx_v_tam_cols = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_tam_cols == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_tam_rows = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_tam_rows == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_tam_objgrid = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_tam_objgrid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_tam_cols_ini = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_tam_cols_ini == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_tam_rows_ini = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_tam_rows_ini == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_nchannels = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_nchannels == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("aplica_transformacion6_PYX", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.aplica_transformacion6_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objgridX), __pyx_ptype_5numpy_ndarray, 1, "objgridX", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objgridY), __pyx_ptype_5numpy_ndarray, 1, "objgridY", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_5numpy_ndarray, 1, "R", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_8aplica_transformacion6_PYX(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), __pyx_v_objgridX, __pyx_v_objgridY, __pyx_v_R, __pyx_v_tam_cols, __pyx_v_tam_rows, __pyx_v_tam_objgrid, __pyx_v_tam_cols_ini, __pyx_v_tam_rows_ini, __pyx_v_nchannels);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_8aplica_transformacion6_PYX(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyArrayObject *__pyx_v_objgridX, PyArrayObject *__pyx_v_objgridY, PyArrayObject *__pyx_v_R, int __pyx_v_tam_cols, int __pyx_v_tam_rows, int __pyx_v_tam_objgrid, int __pyx_v_tam_cols_ini, int __pyx_v_tam_rows_ini, int __pyx_v_nchannels) {
  npy_intp __pyx_v_dims[3];
  Args_aplica_transformacion6_MEX __pyx_v_args;
  PyArrayObject *__pyx_v_TransMu_nD = 0;
  PyArrayObject *__pyx_v_TransMuFore_nD = 0;
  PyArrayObject *__pyx_v_TransCounter = 0;
  PyArrayObject *__pyx_v_TransR_nD = 0;
  PyArrayObject *__pyx_v_TransPi_nD = 0;
  PyArrayObject *__pyx_v_Corona = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("aplica_transformacion6_PYX", 0);

  /* "CCodeBM.pyx":299
 *     cdef Args_aplica_transformacion6_MEX args
 *     cdef cnp.ndarray TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(__pyx_v_objgridX) != 0);
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 299, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":300
 *     cdef cnp.ndarray TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(__pyx_v_objgridY) != 0);
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 300, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":301
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(__pyx_v_R) != 0);
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 301, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":302
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->Mu);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_2)) != 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 302, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":303
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->MuFore);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_2)) != 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 303, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":304
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->Pi);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_2)) != 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 304, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":305
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 *     args.arg1 = <cnp.float64_t *>objgridY.data
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->Counter);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(((PyArrayObject *)__pyx_t_2)) != 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 305, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":306
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg0 = <cnp.float64_t *>objgridX.data             # <<<<<<<<<<<<<<
 *     args.arg1 = <cnp.float64_t *>objgridY.data
 *     args.arg2 = <cnp.float64_t *>self.Mu.data
 */
  __pyx_v_args.arg0 = ((__pyx_t_5numpy_float64_t *)__pyx_v_objgridX->data);

  /* "CCodeBM.pyx":307
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 *     args.arg1 = <cnp.float64_t *>objgridY.data             # <<<<<<<<<<<<<<
 *     args.arg2 = <cnp.float64_t *>self.Mu.data
 *     args.arg3 = <cnp.float64_t *>self.MuFore.data
 */
  __pyx_v_args.arg1 = ((__pyx_t_5numpy_float64_t *)__pyx_v_objgridY->data);

  /* "CCodeBM.pyx":308
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 *     args.arg1 = <cnp.float64_t *>objgridY.data
 *     args.arg2 = <cnp.float64_t *>self.Mu.data             # <<<<<<<<<<<<<<
 *     args.arg3 = <cnp.float64_t *>self.MuFore.data
 *     args.arg4 = <cnp.float64_t *>R.data
 */
  __pyx_v_args.arg2 = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Mu->data);

  /* "CCodeBM.pyx":309
 *     args.arg1 = <cnp.float64_t *>objgridY.data
 *     args.arg2 = <cnp.float64_t *>self.Mu.data
 *     args.arg3 = <cnp.float64_t *>self.MuFore.data             # <<<<<<<<<<<<<<
 *     args.arg4 = <cnp.float64_t *>R.data
 *     args.arg5 = <cnp.float64_t *>self.Pi.data
 */
  __pyx_v_args.arg3 = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->MuFore->data);

  /* "CCodeBM.pyx":310
 *     args.arg2 = <cnp.float64_t *>self.Mu.data
 *     args.arg3 = <cnp.float64_t *>self.MuFore.data
 *     args.arg4 = <cnp.float64_t *>R.data             # <<<<<<<<<<<<<<
 *     args.arg5 = <cnp.float64_t *>self.Pi.data
 *     args.arg6 = <cnp.float64_t *>self.Counter.data
 */
  __pyx_v_args.arg4 = ((__pyx_t_5numpy_float64_t *)__pyx_v_R->data);

  /* "CCodeBM.pyx":311
 *     args.arg3 = <cnp.float64_t *>self.MuFore.data
 *     args.arg4 = <cnp.float64_t *>R.data
 *     args.arg5 = <cnp.float64_t *>self.Pi.data             # <<<<<<<<<<<<<<
 *     args.arg6 = <cnp.float64_t *>self.Counter.data
 *     args.tam_cols = tam_cols
 */
  __pyx_v_args.arg5 = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Pi->data);

  /* "CCodeBM.pyx":312
 *     args.arg4 = <cnp.float64_t *>R.data
 *     args.arg5 = <cnp.float64_t *>self.Pi.data
 *     args.arg6 = <cnp.float64_t *>self.Counter.data             # <<<<<<<<<<<<<<
 *     args.tam_cols = tam_cols
 *     args.tam_rows = tam_rows
 */
  __pyx_v_args.arg6 = ((__pyx_t_5numpy_float64_t *)__pyx_v_self->Counter->data);

  /* "CCodeBM.pyx":313
 *     args.arg5 = <cnp.float64_t *>self.Pi.data
 *     args.arg6 = <cnp.float64_t *>self.Counter.data
 *     args.tam_cols = tam_cols             # <<<<<<<<<<<<<<
 *     args.tam_rows = tam_rows
 *     args.tam_objgrid = tam_objgrid
 */
  __pyx_v_args.tam_cols = __pyx_v_tam_cols;

  /* "CCodeBM.pyx":314
 *     args.arg6 = <cnp.float64_t *>self.Counter.data
 *     args.tam_cols = tam_cols
 *     args.tam_rows = tam_rows             # <<<<<<<<<<<<<<
 *     args.tam_objgrid = tam_objgrid
 *     args.tam_cols_ini = tam_cols_ini
 */
  __pyx_v_args.tam_rows = __pyx_v_tam_rows;

  /* "CCodeBM.pyx":315
 *     args.tam_cols = tam_cols
 *     args.tam_rows = tam_rows
 *     args.tam_objgrid = tam_objgrid             # <<<<<<<<<<<<<<
 *     args.tam_cols_ini = tam_cols_ini
 *     args.tam_rows_ini = tam_rows_ini
 */
  __pyx_v_args.tam_objgrid = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":316
 *     args.tam_rows = tam_rows
 *     args.tam_objgrid = tam_objgrid
 *     args.tam_cols_ini = tam_cols_ini             # <<<<<<<<<<<<<<
 *     args.tam_rows_ini = tam_rows_ini
 *     args.nchannels = nchannels
 */
  __pyx_v_args.tam_cols_ini = __pyx_v_tam_cols_ini;

  /* "CCodeBM.pyx":317
 *     args.tam_objgrid = tam_objgrid
 *     args.tam_cols_ini = tam_cols_ini
 *     args.tam_rows_ini = tam_rows_ini             # <<<<<<<<<<<<<<
 *     args.nchannels = nchannels
 *     dims[0] = nchannels
 */
  __pyx_v_args.tam_rows_ini = __pyx_v_tam_rows_ini;

  /* "CCodeBM.pyx":318
 *     args.tam_cols_ini = tam_cols_ini
 *     args.tam_rows_ini = tam_rows_ini
 *     args.nchannels = nchannels             # <<<<<<<<<<<<<<
 *     dims[0] = nchannels
 *     dims[1] = tam_objgrid
 */
  __pyx_v_args.nchannels = __pyx_v_nchannels;

  /* "CCodeBM.pyx":319
 *     args.tam_rows_ini = tam_rows_ini
 *     args.nchannels = nchannels
 *     dims[0] = nchannels             # <<<<<<<<<<<<<<
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 */
  (__pyx_v_dims[0]) = __pyx_v_nchannels;

  /* "CCodeBM.pyx":320
 *     args.nchannels = nchannels
 *     dims[0] = nchannels
 *     dims[1] = tam_objgrid             # <<<<<<<<<<<<<<
 *     dims[2] = 1
 *     TransMu_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[1]) = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":321
 *     dims[0] = nchannels
 *     dims[1] = tam_objgrid
 *     dims[2] = 1             # <<<<<<<<<<<<<<
 *     TransMu_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     TransMuFore_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[2]) = 1;

  /* "CCodeBM.pyx":322
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 *     TransMu_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *     TransMuFore_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid
 */
  __pyx_t_2 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_v_TransMu_nD = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":323
 *     dims[2] = 1
 *     TransMu_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     TransMuFore_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *     dims[0] = tam_objgrid
 *     dims[1] = 1
 */
  __pyx_t_2 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_v_TransMuFore_nD = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":324
 *     TransMu_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     TransMuFore_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid             # <<<<<<<<<<<<<<
 *     dims[1] = 1
 *     TransCounter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[0]) = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":325
 *     TransMuFore_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid
 *     dims[1] = 1             # <<<<<<<<<<<<<<
 *     TransCounter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = nchannels*nchannels
 */
  (__pyx_v_dims[1]) = 1;

  /* "CCodeBM.pyx":326
 *     dims[0] = tam_objgrid
 *     dims[1] = 1
 *     TransCounter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *     dims[0] = nchannels*nchannels
 *     dims[1] = tam_objgrid
 */
  __pyx_t_2 = PyArray_ZEROS(2, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_v_TransCounter = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":327
 *     dims[1] = 1
 *     TransCounter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = nchannels*nchannels             # <<<<<<<<<<<<<<
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 */
  (__pyx_v_dims[0]) = (__pyx_v_nchannels * __pyx_v_nchannels);

  /* "CCodeBM.pyx":328
 *     TransCounter = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = nchannels*nchannels
 *     dims[1] = tam_objgrid             # <<<<<<<<<<<<<<
 *     dims[2] = 1
 *     TransR_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[1]) = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":329
 *     dims[0] = nchannels*nchannels
 *     dims[1] = tam_objgrid
 *     dims[2] = 1             # <<<<<<<<<<<<<<
 *     TransR_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = 2
 */
  (__pyx_v_dims[2]) = 1;

  /* "CCodeBM.pyx":330
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 *     TransR_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *     dims[0] = 2
 *     dims[1] = tam_objgrid
 */
  __pyx_t_2 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_v_TransR_nD = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":331
 *     dims[2] = 1
 *     TransR_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = 2             # <<<<<<<<<<<<<<
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 */
  (__pyx_v_dims[0]) = 2;

  /* "CCodeBM.pyx":332
 *     TransR_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = 2
 *     dims[1] = tam_objgrid             # <<<<<<<<<<<<<<
 *     dims[2] = 1
 *     TransPi_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[1]) = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":333
 *     dims[0] = 2
 *     dims[1] = tam_objgrid
 *     dims[2] = 1             # <<<<<<<<<<<<<<
 *     TransPi_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid
 */
  (__pyx_v_dims[2]) = 1;

  /* "CCodeBM.pyx":334
 *     dims[1] = tam_objgrid
 *     dims[2] = 1
 *     TransPi_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *     dims[0] = tam_objgrid
 *     dims[1] = 1
 */
  __pyx_t_2 = PyArray_ZEROS(3, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_v_TransPi_nD = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":335
 *     dims[2] = 1
 *     TransPi_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid             # <<<<<<<<<<<<<<
 *     dims[1] = 1
 *     Corona = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT32, 1)
 */
  (__pyx_v_dims[0]) = __pyx_v_tam_objgrid;

  /* "CCodeBM.pyx":336
 *     TransPi_nD = cnp.PyArray_ZEROS(3, dims, cnp.NPY_FLOAT64, 1)
 *     dims[0] = tam_objgrid
 *     dims[1] = 1             # <<<<<<<<<<<<<<
 *     Corona = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT32, 1)
 *     args.oarg0 = <cnp.float64_t *>TransMu_nD.data
 */
  (__pyx_v_dims[1]) = 1;

  /* "CCodeBM.pyx":337
 *     dims[0] = tam_objgrid
 *     dims[1] = 1
 *     Corona = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT32, 1)             # <<<<<<<<<<<<<<
 *     args.oarg0 = <cnp.float64_t *>TransMu_nD.data
 *     args.oarg1 = <cnp.float64_t *>TransMuFore_nD.data
 */
  __pyx_t_2 = PyArray_ZEROS(2, __pyx_v_dims, NPY_FLOAT32, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 337, __pyx_L1_error)
  __pyx_v_Corona = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":338
 *     dims[1] = 1
 *     Corona = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT32, 1)
 *     args.oarg0 = <cnp.float64_t *>TransMu_nD.data             # <<<<<<<<<<<<<<
 *     args.oarg1 = <cnp.float64_t *>TransMuFore_nD.data
 *     args.oarg2 = <cnp.float64_t *>TransCounter.data
 */
  __pyx_v_args.oarg0 = ((__pyx_t_5numpy_float64_t *)__pyx_v_TransMu_nD->data);

  /* "CCodeBM.pyx":339
 *     Corona = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT32, 1)
 *     args.oarg0 = <cnp.float64_t *>TransMu_nD.data
 *     args.oarg1 = <cnp.float64_t *>TransMuFore_nD.data             # <<<<<<<<<<<<<<
 *     args.oarg2 = <cnp.float64_t *>TransCounter.data
 *     args.oarg3 = <cnp.float64_t *>TransR_nD.data
 */
  __pyx_v_args.oarg1 = ((__pyx_t_5numpy_float64_t *)__pyx_v_TransMuFore_nD->data);

  /* "CCodeBM.pyx":340
 *     args.oarg0 = <cnp.float64_t *>TransMu_nD.data
 *     args.oarg1 = <cnp.float64_t *>TransMuFore_nD.data
 *     args.oarg2 = <cnp.float64_t *>TransCounter.data             # <<<<<<<<<<<<<<
 *     args.oarg3 = <cnp.float64_t *>TransR_nD.data
 *     args.oarg4 = <cnp.float64_t *>TransPi_nD.data
 */
  __pyx_v_args.oarg2 = ((__pyx_t_5numpy_float64_t *)__pyx_v_TransCounter->data);

  /* "CCodeBM.pyx":341
 *     args.oarg1 = <cnp.float64_t *>TransMuFore_nD.data
 *     args.oarg2 = <cnp.float64_t *>TransCounter.data
 *     args.oarg3 = <cnp.float64_t *>TransR_nD.data             # <<<<<<<<<<<<<<
 *     args.oarg4 = <cnp.float64_t *>TransPi_nD.data
 *     args.oarg5 = <cnp.float32_t *>Corona.data
 */
  __pyx_v_args.oarg3 = ((__pyx_t_5numpy_float64_t *)__pyx_v_TransR_nD->data);

  /* "CCodeBM.pyx":342
 *     args.oarg2 = <cnp.float64_t *>TransCounter.data
 *     args.oarg3 = <cnp.float64_t *>TransR_nD.data
 *     args.oarg4 = <cnp.float64_t *>TransPi_nD.data             # <<<<<<<<<<<<<<
 *     args.oarg5 = <cnp.float32_t *>Corona.data
 *     aplica_transformacion6_MEX(&args)
 */
  __pyx_v_args.oarg4 = ((__pyx_t_5numpy_float64_t *)__pyx_v_TransPi_nD->data);

  /* "CCodeBM.pyx":343
 *     args.oarg3 = <cnp.float64_t *>TransR_nD.data
 *     args.oarg4 = <cnp.float64_t *>TransPi_nD.data
 *     args.oarg5 = <cnp.float32_t *>Corona.data             # <<<<<<<<<<<<<<
 *     aplica_transformacion6_MEX(&args)
 *     return TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 */
  __pyx_v_args.oarg5 = ((__pyx_t_5numpy_float32_t *)__pyx_v_Corona->data);

  /* "CCodeBM.pyx":344
 *     args.oarg4 = <cnp.float64_t *>TransPi_nD.data
 *     args.oarg5 = <cnp.float32_t *>Corona.data
 *     aplica_transformacion6_MEX(&args)             # <<<<<<<<<<<<<<
 *     return TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 * 
 */
  aplica_transformacion6_MEX((&__pyx_v_args));

  /* "CCodeBM.pyx":345
 *     args.oarg5 = <cnp.float32_t *>Corona.data
 *     aplica_transformacion6_MEX(&args)
 *     return TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_TransMu_nD));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_TransMu_nD));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_TransMu_nD));
  __Pyx_INCREF(((PyObject *)__pyx_v_TransMuFore_nD));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_TransMuFore_nD));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_TransMuFore_nD));
  __Pyx_INCREF(((PyObject *)__pyx_v_TransCounter));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_TransCounter));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_TransCounter));
  __Pyx_INCREF(((PyObject *)__pyx_v_TransR_nD));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_TransR_nD));
  PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_TransR_nD));
  __Pyx_INCREF(((PyObject *)__pyx_v_TransPi_nD));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_TransPi_nD));
  PyTuple_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_v_TransPi_nD));
  __Pyx_INCREF(((PyObject *)__pyx_v_Corona));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Corona));
  PyTuple_SET_ITEM(__pyx_t_2, 5, ((PyObject *)__pyx_v_Corona));
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "CCodeBM.pyx":295
 *       return arg1#, arg2 #THIS SEEMS UNUSED
 * 
 *   def aplica_transformacion6_PYX(self, cnp.ndarray objgridX, cnp.ndarray objgridY, cnp.ndarray R, int tam_cols, int tam_rows, int tam_objgrid, int tam_cols_ini, int tam_rows_ini, int nchannels):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[3]
 *     cdef Args_aplica_transformacion6_MEX args
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CCodeBM.ModelBM.aplica_transformacion6_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_TransMu_nD);
  __Pyx_XDECREF((PyObject *)__pyx_v_TransMuFore_nD);
  __Pyx_XDECREF((PyObject *)__pyx_v_TransCounter);
  __Pyx_XDECREF((PyObject *)__pyx_v_TransR_nD);
  __Pyx_XDECREF((PyObject *)__pyx_v_TransPi_nD);
  __Pyx_XDECREF((PyObject *)__pyx_v_Corona);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":91
 * #FROM createBM.m
 * cdef class ModelBM:
 *   cdef public str Log             # <<<<<<<<<<<<<<
 *   cdef bytes LogBytes
 *   cdef char* LogCharPtr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Log_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Log_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Log___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Log___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Log);
  __pyx_r = __pyx_v_self->Log;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Log_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Log_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Log_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Log_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Log);
  __Pyx_DECREF(__pyx_v_self->Log);
  __pyx_v_self->Log = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Log.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Log_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Log_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Log_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Log_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Log);
  __Pyx_DECREF(__pyx_v_self->Log);
  __pyx_v_self->Log = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":96
 *   cdef object shapeArg2Update
 *   #VERY IMPORTANT: THE *.cpp CODE DEPENDS ON NumCompGauss==1!!!!! If it is bigger it will either segfault or do nonsense!!!!! In particular, "Den" must be an array if NumCompGauss>1 !!!!!!
 *   cdef public double Epsilon, H, Den             # <<<<<<<<<<<<<<
 *   cdef public int NumPatterns, NumCompGauss, NumCompUnif, NumComp, Z, CurrentFrame, KernelProcesses, NumImageRows, NumImageColumns, Dimension
 *   cdef public cnp.ndarray Min, Max, Noise #cnp.ndarray[cnp.float64_t, ndim=1, mode='fortran']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7Epsilon_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7Epsilon_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7Epsilon___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7Epsilon___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Epsilon.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7Epsilon_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7Epsilon_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7Epsilon_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7Epsilon_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_v_self->Epsilon = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.Epsilon.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1H_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1H_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1H___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1H___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->H); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.H.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_1H_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_1H_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1H_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_1H_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_v_self->H = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.H.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Den_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Den_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Den___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Den___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Den); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Den.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Den_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Den_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Den_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Den_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_v_self->Den = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.Den.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":97
 *   #VERY IMPORTANT: THE *.cpp CODE DEPENDS ON NumCompGauss==1!!!!! If it is bigger it will either segfault or do nonsense!!!!! In particular, "Den" must be an array if NumCompGauss>1 !!!!!!
 *   cdef public double Epsilon, H, Den
 *   cdef public int NumPatterns, NumCompGauss, NumCompUnif, NumComp, Z, CurrentFrame, KernelProcesses, NumImageRows, NumImageColumns, Dimension             # <<<<<<<<<<<<<<
 *   cdef public cnp.ndarray Min, Max, Noise #cnp.ndarray[cnp.float64_t, ndim=1, mode='fortran']
 *   cdef public cnp.ndarray Counter #cnp.ndarray[cnp.float64_t, ndim=2, mode='fortran']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_11NumPatterns___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_11NumPatterns___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumPatterns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumPatterns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_11NumPatterns_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_11NumPatterns_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumPatterns = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumPatterns.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumCompGauss); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumCompGauss.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_12NumCompGauss_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumCompGauss = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumCompGauss.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumCompUnif); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumCompUnif.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_11NumCompUnif_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumCompUnif = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumCompUnif.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7NumComp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7NumComp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7NumComp___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7NumComp___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumComp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumComp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7NumComp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7NumComp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7NumComp_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7NumComp_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumComp = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumComp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1Z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1Z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1Z___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1Z___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_1Z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_1Z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1Z_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_1Z_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->Z = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.Z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->CurrentFrame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.CurrentFrame.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_12CurrentFrame_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->CurrentFrame = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.CurrentFrame.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->KernelProcesses); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.KernelProcesses.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_15KernelProcesses_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->KernelProcesses = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.KernelProcesses.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12NumImageRows___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12NumImageRows___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageRows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumImageRows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12NumImageRows_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_12NumImageRows_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumImageRows = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumImageRows.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageColumns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumImageColumns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_15NumImageColumns_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->NumImageColumns = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.NumImageColumns.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_9Dimension_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_9Dimension_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_9Dimension___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_9Dimension___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Dimension); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Dimension.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_9Dimension_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_9Dimension_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_9Dimension_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_9Dimension_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_self->Dimension = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CCodeBM.ModelBM.Dimension.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":98
 *   cdef public double Epsilon, H, Den
 *   cdef public int NumPatterns, NumCompGauss, NumCompUnif, NumComp, Z, CurrentFrame, KernelProcesses, NumImageRows, NumImageColumns, Dimension
 *   cdef public cnp.ndarray Min, Max, Noise #cnp.ndarray[cnp.float64_t, ndim=1, mode='fortran']             # <<<<<<<<<<<<<<
 *   cdef public cnp.ndarray Counter #cnp.ndarray[cnp.float64_t, ndim=2, mode='fortran']
 *   cdef public cnp.ndarray Pi, LogDetC #cnp.ndarray[cnp.float64_t, ndim=3, mode='fortran']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Min___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Min___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Min));
  __pyx_r = ((PyObject *)__pyx_v_self->Min);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Min_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Min_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Min);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Min));
  __pyx_v_self->Min = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Min.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Min_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Min_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Min_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Min_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Min);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Min));
  __pyx_v_self->Min = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_3Max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Max___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_3Max___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Max));
  __pyx_r = ((PyObject *)__pyx_v_self->Max);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Max_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Max_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Max);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Max));
  __pyx_v_self->Max = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Max.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_3Max_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_3Max_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_3Max_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_3Max_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Max);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Max));
  __pyx_v_self->Max = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_5Noise_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_5Noise_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_5Noise___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_5Noise___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Noise));
  __pyx_r = ((PyObject *)__pyx_v_self->Noise);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_5Noise_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_5Noise_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_5Noise_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_5Noise_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Noise);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Noise));
  __pyx_v_self->Noise = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Noise.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_5Noise_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_5Noise_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_5Noise_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_5Noise_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Noise);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Noise));
  __pyx_v_self->Noise = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":99
 *   cdef public int NumPatterns, NumCompGauss, NumCompUnif, NumComp, Z, CurrentFrame, KernelProcesses, NumImageRows, NumImageColumns, Dimension
 *   cdef public cnp.ndarray Min, Max, Noise #cnp.ndarray[cnp.float64_t, ndim=1, mode='fortran']
 *   cdef public cnp.ndarray Counter #cnp.ndarray[cnp.float64_t, ndim=2, mode='fortran']             # <<<<<<<<<<<<<<
 *   cdef public cnp.ndarray Pi, LogDetC #cnp.ndarray[cnp.float64_t, ndim=3, mode='fortran']
 *   cdef public cnp.ndarray Mu, MuFore #cnp.ndarray[cnp.float64_t, ndim=4, mode='fortran']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7Counter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7Counter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7Counter___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7Counter___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Counter));
  __pyx_r = ((PyObject *)__pyx_v_self->Counter);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7Counter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7Counter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7Counter_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7Counter_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Counter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Counter));
  __pyx_v_self->Counter = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Counter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7Counter_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7Counter_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7Counter_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7Counter_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Counter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Counter));
  __pyx_v_self->Counter = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":100
 *   cdef public cnp.ndarray Min, Max, Noise #cnp.ndarray[cnp.float64_t, ndim=1, mode='fortran']
 *   cdef public cnp.ndarray Counter #cnp.ndarray[cnp.float64_t, ndim=2, mode='fortran']
 *   cdef public cnp.ndarray Pi, LogDetC #cnp.ndarray[cnp.float64_t, ndim=3, mode='fortran']             # <<<<<<<<<<<<<<
 *   cdef public cnp.ndarray Mu, MuFore #cnp.ndarray[cnp.float64_t, ndim=4, mode='fortran']
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_2Pi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_2Pi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Pi___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2Pi___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Pi));
  __pyx_r = ((PyObject *)__pyx_v_self->Pi);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_2Pi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_2Pi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Pi_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_2Pi_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Pi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Pi));
  __pyx_v_self->Pi = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Pi.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_2Pi_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_2Pi_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Pi_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_2Pi_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Pi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Pi));
  __pyx_v_self->Pi = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7LogDetC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_7LogDetC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7LogDetC___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_7LogDetC___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->LogDetC));
  __pyx_r = ((PyObject *)__pyx_v_self->LogDetC);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->LogDetC);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->LogDetC));
  __pyx_v_self->LogDetC = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.LogDetC.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_7LogDetC_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->LogDetC);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->LogDetC));
  __pyx_v_self->LogDetC = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":101
 *   cdef public cnp.ndarray Counter #cnp.ndarray[cnp.float64_t, ndim=2, mode='fortran']
 *   cdef public cnp.ndarray Pi, LogDetC #cnp.ndarray[cnp.float64_t, ndim=3, mode='fortran']
 *   cdef public cnp.ndarray Mu, MuFore #cnp.ndarray[cnp.float64_t, ndim=4, mode='fortran']             # <<<<<<<<<<<<<<
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_2Mu_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_2Mu_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Mu___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_2Mu___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Mu));
  __pyx_r = ((PyObject *)__pyx_v_self->Mu);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_2Mu_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_2Mu_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Mu_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_2Mu_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Mu);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Mu));
  __pyx_v_self->Mu = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.Mu.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_2Mu_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_2Mu_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_2Mu_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_2Mu_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Mu);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Mu));
  __pyx_v_self->Mu = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_6MuFore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_6MuFore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_6MuFore___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_6MuFore___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->MuFore));
  __pyx_r = ((PyObject *)__pyx_v_self->MuFore);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_6MuFore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_6MuFore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_6MuFore_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_6MuFore_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->MuFore);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->MuFore));
  __pyx_v_self->MuFore = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.MuFore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_6MuFore_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_6MuFore_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_6MuFore_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_6MuFore_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->MuFore);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->MuFore));
  __pyx_v_self->MuFore = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":102
 *   cdef public cnp.ndarray Pi, LogDetC #cnp.ndarray[cnp.float64_t, ndim=3, mode='fortran']
 *   cdef public cnp.ndarray Mu, MuFore #cnp.ndarray[cnp.float64_t, ndim=4, mode='fortran']
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1C_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_1C_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1C___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_1C___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->C));
  __pyx_r = ((PyObject *)__pyx_v_self->C);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_1C_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_1C_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1C_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_1C_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->C);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->C));
  __pyx_v_self->C = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.C.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_1C_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_1C_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_1C_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_1C_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->C);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->C));
  __pyx_v_self->C = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_4InvC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_4InvC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_4InvC___get__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_4InvC___get__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->InvC));
  __pyx_r = ((PyObject *)__pyx_v_self->InvC);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_4InvC_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_4InvC_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_4InvC_2__set__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_4InvC_2__set__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->InvC);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->InvC));
  __pyx_v_self->InvC = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.InvC.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7CCodeBM_7ModelBM_4InvC_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7CCodeBM_7ModelBM_4InvC_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_4InvC_4__del__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7CCodeBM_7ModelBM_4InvC_4__del__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->InvC);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->InvC));
  __pyx_v_self->InvC = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_10__reduce_cython__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_10__reduce_cython__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->CurrentFrame); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->Den); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->Dimension); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->Epsilon); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->H); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->KernelProcesses); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_v_self->LogCharPtr); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->NumComp); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->NumCompGauss); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->NumCompUnif); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageColumns); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_self->NumImageRows); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_self->NumPatterns); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->Z); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyTuple_New(27); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->C));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->C));
  PyTuple_SET_ITEM(__pyx_t_15, 0, ((PyObject *)__pyx_v_self->C));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Counter));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Counter));
  PyTuple_SET_ITEM(__pyx_t_15, 1, ((PyObject *)__pyx_v_self->Counter));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->InvC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->InvC));
  PyTuple_SET_ITEM(__pyx_t_15, 7, ((PyObject *)__pyx_v_self->InvC));
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_15, 8, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->Log);
  __Pyx_GIVEREF(__pyx_v_self->Log);
  PyTuple_SET_ITEM(__pyx_t_15, 9, __pyx_v_self->Log);
  __Pyx_INCREF(__pyx_v_self->LogBytes);
  __Pyx_GIVEREF(__pyx_v_self->LogBytes);
  PyTuple_SET_ITEM(__pyx_t_15, 10, __pyx_v_self->LogBytes);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_15, 11, __pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->LogDetC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->LogDetC));
  PyTuple_SET_ITEM(__pyx_t_15, 12, ((PyObject *)__pyx_v_self->LogDetC));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Max));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Max));
  PyTuple_SET_ITEM(__pyx_t_15, 13, ((PyObject *)__pyx_v_self->Max));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Min));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Min));
  PyTuple_SET_ITEM(__pyx_t_15, 14, ((PyObject *)__pyx_v_self->Min));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Mu));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Mu));
  PyTuple_SET_ITEM(__pyx_t_15, 15, ((PyObject *)__pyx_v_self->Mu));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->MuFore));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->MuFore));
  PyTuple_SET_ITEM(__pyx_t_15, 16, ((PyObject *)__pyx_v_self->MuFore));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Noise));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Noise));
  PyTuple_SET_ITEM(__pyx_t_15, 17, ((PyObject *)__pyx_v_self->Noise));
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_15, 18, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_15, 19, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_15, 20, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_15, 21, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_15, 22, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_15, 23, __pyx_t_13);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Pi));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Pi));
  PyTuple_SET_ITEM(__pyx_t_15, 24, ((PyObject *)__pyx_v_self->Pi));
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_15, 25, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_self->shapeArg2Update);
  __Pyx_GIVEREF(__pyx_v_self->shapeArg2Update);
  PyTuple_SET_ITEM(__pyx_t_15, 26, __pyx_v_self->shapeArg2Update);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_15 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_v__dict = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "(tree fragment)":5
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_16 = (__pyx_v__dict != Py_None);
  __pyx_t_17 = (__pyx_t_16 != 0);
  if (__pyx_t_17) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v__dict);
    __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_14));
    __pyx_t_14 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.C is not None or self.Counter is not None or self.InvC is not None or self.Log is not None or self.LogBytes is not None or self.LogDetC is not None or self.Max is not None or self.Min is not None or self.Mu is not None or self.MuFore is not None or self.Noise is not None or self.Pi is not None or self.shapeArg2Update is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = self.C is not None or self.Counter is not None or self.InvC is not None or self.Log is not None or self.LogBytes is not None or self.LogDetC is not None or self.Max is not None or self.Min is not None or self.Mu is not None or self.MuFore is not None or self.Noise is not None or self.Pi is not None or self.shapeArg2Update is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, None), state
 */
  /*else*/ {
    __pyx_t_16 = (((PyObject *)__pyx_v_self->C) != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (((PyObject *)__pyx_v_self->Counter) != Py_None);
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (((PyObject *)__pyx_v_self->InvC) != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (__pyx_v_self->Log != ((PyObject*)Py_None));
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (__pyx_v_self->LogBytes != ((PyObject*)Py_None));
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (((PyObject *)__pyx_v_self->LogDetC) != Py_None);
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (((PyObject *)__pyx_v_self->Max) != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (((PyObject *)__pyx_v_self->Min) != Py_None);
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (((PyObject *)__pyx_v_self->Mu) != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (((PyObject *)__pyx_v_self->MuFore) != Py_None);
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (((PyObject *)__pyx_v_self->Noise) != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_17 = __pyx_t_18;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_18 = (((PyObject *)__pyx_v_self->Pi) != Py_None);
    __pyx_t_16 = (__pyx_t_18 != 0);
    if (!__pyx_t_16) {
    } else {
      __pyx_t_17 = __pyx_t_16;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_16 = (__pyx_v_self->shapeArg2Update != Py_None);
    __pyx_t_18 = (__pyx_t_16 != 0);
    __pyx_t_17 = __pyx_t_18;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_17;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.C is not None or self.Counter is not None or self.InvC is not None or self.Log is not None or self.LogBytes is not None or self.LogDetC is not None or self.Max is not None or self.Min is not None or self.Mu is not None or self.MuFore is not None or self.Noise is not None or self.Pi is not None or self.shapeArg2Update is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, None), state
 *     else:
 */
  __pyx_t_17 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_17) {

    /* "(tree fragment)":11
 *         use_setstate = self.C is not None or self.Counter is not None or self.InvC is not None or self.Log is not None or self.LogBytes is not None or self.LogDetC is not None or self.Max is not None or self.Min is not None or self.Mu is not None or self.MuFore is not None or self.Noise is not None or self.Pi is not None or self.shapeArg2Update is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_ModelBM); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_15, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_10392827);
    __Pyx_GIVEREF(__pyx_int_10392827);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_int_10392827);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_15, 2, Py_None);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_15);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_v_state);
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_r = __pyx_t_13;
    __pyx_t_13 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.C is not None or self.Counter is not None or self.InvC is not None or self.Log is not None or self.LogBytes is not None or self.LogDetC is not None or self.Max is not None or self.Min is not None or self.Mu is not None or self.MuFore is not None or self.Noise is not None or self.Pi is not None or self.shapeArg2Update is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, None), state
 *     else:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ModelBM__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_ModelBM); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_15, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_10392827);
    __Pyx_GIVEREF(__pyx_int_10392827);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_int_10392827);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_v_state);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_15);
    __pyx_t_13 = 0;
    __pyx_t_15 = 0;
    __pyx_r = __pyx_t_14;
    __pyx_t_14 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.C, self.Counter, self.CurrentFrame, self.Den, self.Dimension, self.Epsilon, self.H, self.InvC, self.KernelProcesses, self.Log, self.LogBytes, self.LogCharPtr, self.LogDetC, self.Max, self.Min, self.Mu, self.MuFore, self.Noise, self.NumComp, self.NumCompGauss, self.NumCompUnif, self.NumImageColumns, self.NumImageRows, self.NumPatterns, self.Pi, self.Z, self.shapeArg2Update)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("CCodeBM.ModelBM.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ModelBM__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7CCodeBM_7ModelBM_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7CCodeBM_7ModelBM_12__setstate_cython__(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_7ModelBM_12__setstate_cython__(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ModelBM__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7CCodeBM___pyx_unpickle_ModelBM__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_ModelBM, (type(self), 0x09e94fb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ModelBM__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CCodeBM.ModelBM.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":348
 * 
 * 
 * def extrae_transformacion_BF2_PYX(cnp.ndarray arg0, cnp.ndarray arg1, bool upright, int minHessian, double ransacReproj, int tam_cols, int tam_rows, int tam_cols_ext, int tam_rows_ext):             # <<<<<<<<<<<<<<
 *   cdef cnp.npy_intp dims[2]
 *   cdef Args_extrae_transformacion_BF2_MEX args
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_1extrae_transformacion_BF2_PYX(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7CCodeBM_1extrae_transformacion_BF2_PYX = {"extrae_transformacion_BF2_PYX", (PyCFunction)__pyx_pw_7CCodeBM_1extrae_transformacion_BF2_PYX, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7CCodeBM_1extrae_transformacion_BF2_PYX(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_arg0 = 0;
  PyArrayObject *__pyx_v_arg1 = 0;
  bool __pyx_v_upright;
  int __pyx_v_minHessian;
  double __pyx_v_ransacReproj;
  int __pyx_v_tam_cols;
  int __pyx_v_tam_rows;
  int __pyx_v_tam_cols_ext;
  int __pyx_v_tam_rows_ext;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extrae_transformacion_BF2_PYX (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg0,&__pyx_n_s_arg1,&__pyx_n_s_upright,&__pyx_n_s_minHessian,&__pyx_n_s_ransacReproj,&__pyx_n_s_tam_cols,&__pyx_n_s_tam_rows,&__pyx_n_s_tam_cols_ext,&__pyx_n_s_tam_rows_ext,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 1); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upright)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 2); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minHessian)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 3); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ransacReproj)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 4); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 5); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 6); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_cols_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 7); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tam_rows_ext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, 8); __PYX_ERR(0, 348, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extrae_transformacion_BF2_PYX") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_arg0 = ((PyArrayObject *)values[0]);
    __pyx_v_arg1 = ((PyArrayObject *)values[1]);
    __pyx_v_upright = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_upright == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_minHessian = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_minHessian == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_ransacReproj = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_ransacReproj == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_tam_cols = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_tam_cols == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_tam_rows = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_tam_rows == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_tam_cols_ext = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_tam_cols_ext == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    __pyx_v_tam_rows_ext = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_tam_rows_ext == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extrae_transformacion_BF2_PYX", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("CCodeBM.extrae_transformacion_BF2_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_5numpy_ndarray, 1, "arg0", 0))) __PYX_ERR(0, 348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_5numpy_ndarray, 1, "arg1", 0))) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_r = __pyx_pf_7CCodeBM_extrae_transformacion_BF2_PYX(__pyx_self, __pyx_v_arg0, __pyx_v_arg1, __pyx_v_upright, __pyx_v_minHessian, __pyx_v_ransacReproj, __pyx_v_tam_cols, __pyx_v_tam_rows, __pyx_v_tam_cols_ext, __pyx_v_tam_rows_ext);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_extrae_transformacion_BF2_PYX(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_arg0, PyArrayObject *__pyx_v_arg1, bool __pyx_v_upright, int __pyx_v_minHessian, double __pyx_v_ransacReproj, int __pyx_v_tam_cols, int __pyx_v_tam_rows, int __pyx_v_tam_cols_ext, int __pyx_v_tam_rows_ext) {
  npy_intp __pyx_v_dims[2];
  Args_extrae_transformacion_BF2_MEX __pyx_v_args;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("extrae_transformacion_BF2_PYX", 0);

  /* "CCodeBM.pyx":352
 *   cdef Args_extrae_transformacion_BF2_MEX args
 *   cdef cnp.ndarray output
 *   if badArray(arg0): raise IndexError('arg0 MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')
 *   args.arg0 = <cnp.float64_t *>arg0.data
 */
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(__pyx_v_arg0) != 0);
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 352, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":353
 *   cdef cnp.ndarray output
 *   if badArray(arg0): raise IndexError('arg0 MUST BE A FORTRAN ARRAY!!!!')
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *   args.arg0 = <cnp.float64_t *>arg0.data
 *   args.arg1 = <cnp.float64_t *>arg1.data
 */
  __pyx_t_1 = (__pyx_f_7CCodeBM_badArray(__pyx_v_arg1) != 0);
  if (unlikely(__pyx_t_1)) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 353, __pyx_L1_error)
  }

  /* "CCodeBM.pyx":354
 *   if badArray(arg0): raise IndexError('arg0 MUST BE A FORTRAN ARRAY!!!!')
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')
 *   args.arg0 = <cnp.float64_t *>arg0.data             # <<<<<<<<<<<<<<
 *   args.arg1 = <cnp.float64_t *>arg1.data
 *   dims[0] = 3
 */
  __pyx_v_args.arg0 = ((__pyx_t_5numpy_float64_t *)__pyx_v_arg0->data);

  /* "CCodeBM.pyx":355
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')
 *   args.arg0 = <cnp.float64_t *>arg0.data
 *   args.arg1 = <cnp.float64_t *>arg1.data             # <<<<<<<<<<<<<<
 *   dims[0] = 3
 *   dims[1] = 3
 */
  __pyx_v_args.arg1 = ((__pyx_t_5numpy_float64_t *)__pyx_v_arg1->data);

  /* "CCodeBM.pyx":356
 *   args.arg0 = <cnp.float64_t *>arg0.data
 *   args.arg1 = <cnp.float64_t *>arg1.data
 *   dims[0] = 3             # <<<<<<<<<<<<<<
 *   dims[1] = 3
 *   output = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 */
  (__pyx_v_dims[0]) = 3;

  /* "CCodeBM.pyx":357
 *   args.arg1 = <cnp.float64_t *>arg1.data
 *   dims[0] = 3
 *   dims[1] = 3             # <<<<<<<<<<<<<<
 *   output = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *   args.ransacReproj = ransacReproj
 */
  (__pyx_v_dims[1]) = 3;

  /* "CCodeBM.pyx":358
 *   dims[0] = 3
 *   dims[1] = 3
 *   output = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)             # <<<<<<<<<<<<<<
 *   args.ransacReproj = ransacReproj
 *   args.minHessian = minHessian
 */
  __pyx_t_2 = PyArray_ZEROS(2, __pyx_v_dims, NPY_FLOAT64, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_v_output = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CCodeBM.pyx":359
 *   dims[1] = 3
 *   output = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *   args.ransacReproj = ransacReproj             # <<<<<<<<<<<<<<
 *   args.minHessian = minHessian
 *   args.upright = upright
 */
  __pyx_v_args.ransacReproj = __pyx_v_ransacReproj;

  /* "CCodeBM.pyx":360
 *   output = cnp.PyArray_ZEROS(2, dims, cnp.NPY_FLOAT64, 1)
 *   args.ransacReproj = ransacReproj
 *   args.minHessian = minHessian             # <<<<<<<<<<<<<<
 *   args.upright = upright
 *   args.tam_cols = tam_cols
 */
  __pyx_v_args.minHessian = __pyx_v_minHessian;

  /* "CCodeBM.pyx":361
 *   args.ransacReproj = ransacReproj
 *   args.minHessian = minHessian
 *   args.upright = upright             # <<<<<<<<<<<<<<
 *   args.tam_cols = tam_cols
 *   args.tam_rows = tam_rows
 */
  __pyx_v_args.upright = __pyx_v_upright;

  /* "CCodeBM.pyx":362
 *   args.minHessian = minHessian
 *   args.upright = upright
 *   args.tam_cols = tam_cols             # <<<<<<<<<<<<<<
 *   args.tam_rows = tam_rows
 *   args.tam_cols_ext = tam_cols_ext
 */
  __pyx_v_args.tam_cols = __pyx_v_tam_cols;

  /* "CCodeBM.pyx":363
 *   args.upright = upright
 *   args.tam_cols = tam_cols
 *   args.tam_rows = tam_rows             # <<<<<<<<<<<<<<
 *   args.tam_cols_ext = tam_cols_ext
 *   args.tam_rows_ext = tam_rows_ext
 */
  __pyx_v_args.tam_rows = __pyx_v_tam_rows;

  /* "CCodeBM.pyx":364
 *   args.tam_cols = tam_cols
 *   args.tam_rows = tam_rows
 *   args.tam_cols_ext = tam_cols_ext             # <<<<<<<<<<<<<<
 *   args.tam_rows_ext = tam_rows_ext
 *   args.output = <cnp.float64_t *>output.data
 */
  __pyx_v_args.tam_cols_ext = __pyx_v_tam_cols_ext;

  /* "CCodeBM.pyx":365
 *   args.tam_rows = tam_rows
 *   args.tam_cols_ext = tam_cols_ext
 *   args.tam_rows_ext = tam_rows_ext             # <<<<<<<<<<<<<<
 *   args.output = <cnp.float64_t *>output.data
 *   extrae_transformacion_BF2_MEX(&args)
 */
  __pyx_v_args.tam_rows_ext = __pyx_v_tam_rows_ext;

  /* "CCodeBM.pyx":366
 *   args.tam_cols_ext = tam_cols_ext
 *   args.tam_rows_ext = tam_rows_ext
 *   args.output = <cnp.float64_t *>output.data             # <<<<<<<<<<<<<<
 *   extrae_transformacion_BF2_MEX(&args)
 *   return output
 */
  __pyx_v_args.output = ((__pyx_t_5numpy_float64_t *)__pyx_v_output->data);

  /* "CCodeBM.pyx":367
 *   args.tam_rows_ext = tam_rows_ext
 *   args.output = <cnp.float64_t *>output.data
 *   extrae_transformacion_BF2_MEX(&args)             # <<<<<<<<<<<<<<
 *   return output
 * 
 */
  extrae_transformacion_BF2_MEX((&__pyx_v_args));

  /* "CCodeBM.pyx":368
 *   args.output = <cnp.float64_t *>output.data
 *   extrae_transformacion_BF2_MEX(&args)
 *   return output             # <<<<<<<<<<<<<<
 * 
 * cdef bool badArray(cnp.ndarray a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "CCodeBM.pyx":348
 * 
 * 
 * def extrae_transformacion_BF2_PYX(cnp.ndarray arg0, cnp.ndarray arg1, bool upright, int minHessian, double ransacReproj, int tam_cols, int tam_rows, int tam_cols_ext, int tam_rows_ext):             # <<<<<<<<<<<<<<
 *   cdef cnp.npy_intp dims[2]
 *   cdef Args_extrae_transformacion_BF2_MEX args
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CCodeBM.extrae_transformacion_BF2_PYX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CCodeBM.pyx":370
 *   return output
 * 
 * cdef bool badArray(cnp.ndarray a):             # <<<<<<<<<<<<<<
 *   #the constant should be NPY_ARRAY_FARRAY, but cython used the deprecated NPY_FARRAY
 *   return (cnp.PyArray_FLAGS(a) & cnp.NPY_FARRAY) != cnp.NPY_FARRAY
 */

static bool __pyx_f_7CCodeBM_badArray(PyArrayObject *__pyx_v_a) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("badArray", 0);

  /* "CCodeBM.pyx":372
 * cdef bool badArray(cnp.ndarray a):
 *   #the constant should be NPY_ARRAY_FARRAY, but cython used the deprecated NPY_FARRAY
 *   return (cnp.PyArray_FLAGS(a) & cnp.NPY_FARRAY) != cnp.NPY_FARRAY             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((PyArray_FLAGS(__pyx_v_a) & NPY_FARRAY) != NPY_FARRAY);
  goto __pyx_L0;

  /* "CCodeBM.pyx":370
 *   return output
 * 
 * cdef bool badArray(cnp.ndarray a):             # <<<<<<<<<<<<<<
 *   #the constant should be NPY_ARRAY_FARRAY, but cython used the deprecated NPY_FARRAY
 *   return (cnp.PyArray_FLAGS(a) & cnp.NPY_FARRAY) != cnp.NPY_FARRAY
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7CCodeBM_3__pyx_unpickle_ModelBM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7CCodeBM_3__pyx_unpickle_ModelBM = {"__pyx_unpickle_ModelBM", (PyCFunction)__pyx_pw_7CCodeBM_3__pyx_unpickle_ModelBM, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7CCodeBM_3__pyx_unpickle_ModelBM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ModelBM (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ModelBM", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ModelBM", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ModelBM") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ModelBM", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("CCodeBM.__pyx_unpickle_ModelBM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7CCodeBM_2__pyx_unpickle_ModelBM(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7CCodeBM_2__pyx_unpickle_ModelBM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ModelBM", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x09e94fb:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x09e94fb) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 *     __pyx_result = ModelBM.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ModelBM.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x09, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x09e94fb:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 *     __pyx_result = ModelBM.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7CCodeBM_ModelBM), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 *     __pyx_result = ModelBM.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = ModelBM.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7CCodeBM___pyx_unpickle_ModelBM__set_state(((struct __pyx_obj_7CCodeBM_ModelBM *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x09e94fb = (C, Counter, CurrentFrame, Den, Dimension, Epsilon, H, InvC, KernelProcesses, Log, LogBytes, LogCharPtr, LogDetC, Max, Min, Mu, MuFore, Noise, NumComp, NumCompGauss, NumCompUnif, NumImageColumns, NumImageRows, NumPatterns, Pi, Z, shapeArg2Update))" % __pyx_checksum)
 *     __pyx_result = ModelBM.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CCodeBM.__pyx_unpickle_ModelBM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7CCodeBM___pyx_unpickle_ModelBM__set_state(struct __pyx_obj_7CCodeBM_ModelBM *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ModelBM__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->C);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->C));
  __pyx_v___pyx_result->C = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Counter);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Counter));
  __pyx_v___pyx_result->Counter = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->CurrentFrame = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Den = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Dimension = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Epsilon = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->H = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->InvC);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->InvC));
  __pyx_v___pyx_result->InvC = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->KernelProcesses = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Log);
  __Pyx_DECREF(__pyx_v___pyx_result->Log);
  __pyx_v___pyx_result->Log = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->LogBytes);
  __Pyx_DECREF(__pyx_v___pyx_result->LogBytes);
  __pyx_v___pyx_result->LogBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_v___pyx_result->LogCharPtr = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->LogDetC);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->LogDetC));
  __pyx_v___pyx_result->LogDetC = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Max);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Max));
  __pyx_v___pyx_result->Max = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Min);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Min));
  __pyx_v___pyx_result->Min = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Mu);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Mu));
  __pyx_v___pyx_result->Mu = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->MuFore);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->MuFore));
  __pyx_v___pyx_result->MuFore = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Noise);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Noise));
  __pyx_v___pyx_result->Noise = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumComp = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumCompGauss = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumCompUnif = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumImageColumns = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumImageRows = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->NumPatterns = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Pi);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Pi));
  __pyx_v___pyx_result->Pi = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Z = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->shapeArg2Update);
  __Pyx_DECREF(__pyx_v___pyx_result->shapeArg2Update);
  __pyx_v___pyx_result->shapeArg2Update = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 11, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 27) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":12
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[27])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_9};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_9};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_ModelBM__set_state(<ModelBM> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ModelBM__set_state(ModelBM __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.C = __pyx_state[0]; __pyx_result.Counter = __pyx_state[1]; __pyx_result.CurrentFrame = __pyx_state[2]; __pyx_result.Den = __pyx_state[3]; __pyx_result.Dimension = __pyx_state[4]; __pyx_result.Epsilon = __pyx_state[5]; __pyx_result.H = __pyx_state[6]; __pyx_result.InvC = __pyx_state[7]; __pyx_result.KernelProcesses = __pyx_state[8]; __pyx_result.Log = __pyx_state[9]; __pyx_result.LogBytes = __pyx_state[10]; __pyx_result.LogCharPtr = __pyx_state[11]; __pyx_result.LogDetC = __pyx_state[12]; __pyx_result.Max = __pyx_state[13]; __pyx_result.Min = __pyx_state[14]; __pyx_result.Mu = __pyx_state[15]; __pyx_result.MuFore = __pyx_state[16]; __pyx_result.Noise = __pyx_state[17]; __pyx_result.NumComp = __pyx_state[18]; __pyx_result.NumCompGauss = __pyx_state[19]; __pyx_result.NumCompUnif = __pyx_state[20]; __pyx_result.NumImageColumns = __pyx_state[21]; __pyx_result.NumImageRows = __pyx_state[22]; __pyx_result.NumPatterns = __pyx_state[23]; __pyx_result.Pi = __pyx_state[24]; __pyx_result.Z = __pyx_state[25]; __pyx_result.shapeArg2Update = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("CCodeBM.__pyx_unpickle_ModelBM__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":228
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 229, __pyx_L1_error)

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 233, __pyx_L1_error)

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 263, __pyx_L1_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 282, __pyx_L1_error)
      break;
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_8 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_8 == ((char *)NULL))) __PYX_ERR(2, 289, __pyx_L1_error)
    __pyx_v_f = __pyx_t_8;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":298
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 805, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 805, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 806, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 807, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 807, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 807, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 810, __pyx_L1_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 814, __pyx_L1_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 834, __pyx_L1_error)

        /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 855, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 860, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":982
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":984
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 998, __pyx_L3_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1000, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1004, __pyx_L3_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1005
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1005, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1006, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1006, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1010, __pyx_L3_error)

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1012, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7CCodeBM_ModelBM(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7CCodeBM_ModelBM *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7CCodeBM_ModelBM *)o);
  p->Log = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->LogBytes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->shapeArg2Update = Py_None; Py_INCREF(Py_None);
  p->Min = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Max = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Noise = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Counter = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Pi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->LogDetC = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Mu = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->MuFore = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->C = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->InvC = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7CCodeBM_ModelBM(PyObject *o) {
  struct __pyx_obj_7CCodeBM_ModelBM *p = (struct __pyx_obj_7CCodeBM_ModelBM *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->Log);
  Py_CLEAR(p->LogBytes);
  Py_CLEAR(p->shapeArg2Update);
  Py_CLEAR(p->Min);
  Py_CLEAR(p->Max);
  Py_CLEAR(p->Noise);
  Py_CLEAR(p->Counter);
  Py_CLEAR(p->Pi);
  Py_CLEAR(p->LogDetC);
  Py_CLEAR(p->Mu);
  Py_CLEAR(p->MuFore);
  Py_CLEAR(p->C);
  Py_CLEAR(p->InvC);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7CCodeBM_ModelBM(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7CCodeBM_ModelBM *p = (struct __pyx_obj_7CCodeBM_ModelBM *)o;
  if (p->shapeArg2Update) {
    e = (*v)(p->shapeArg2Update, a); if (e) return e;
  }
  if (p->Min) {
    e = (*v)(((PyObject *)p->Min), a); if (e) return e;
  }
  if (p->Max) {
    e = (*v)(((PyObject *)p->Max), a); if (e) return e;
  }
  if (p->Noise) {
    e = (*v)(((PyObject *)p->Noise), a); if (e) return e;
  }
  if (p->Counter) {
    e = (*v)(((PyObject *)p->Counter), a); if (e) return e;
  }
  if (p->Pi) {
    e = (*v)(((PyObject *)p->Pi), a); if (e) return e;
  }
  if (p->LogDetC) {
    e = (*v)(((PyObject *)p->LogDetC), a); if (e) return e;
  }
  if (p->Mu) {
    e = (*v)(((PyObject *)p->Mu), a); if (e) return e;
  }
  if (p->MuFore) {
    e = (*v)(((PyObject *)p->MuFore), a); if (e) return e;
  }
  if (p->C) {
    e = (*v)(((PyObject *)p->C), a); if (e) return e;
  }
  if (p->InvC) {
    e = (*v)(((PyObject *)p->InvC), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7CCodeBM_ModelBM(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7CCodeBM_ModelBM *p = (struct __pyx_obj_7CCodeBM_ModelBM *)o;
  tmp = ((PyObject*)p->shapeArg2Update);
  p->shapeArg2Update = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Min);
  p->Min = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Max);
  p->Max = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Noise);
  p->Noise = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Counter);
  p->Counter = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Pi);
  p->Pi = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->LogDetC);
  p->LogDetC = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Mu);
  p->Mu = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->MuFore);
  p->MuFore = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->C);
  p->C = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->InvC);
  p->InvC = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Log(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_3Log_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Log(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_3Log_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_3Log_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Epsilon(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_7Epsilon_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Epsilon(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_7Epsilon_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_H(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_1H_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_H(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_1H_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Den(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_3Den_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Den(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_3Den_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumPatterns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumPatterns(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_11NumPatterns_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumCompGauss(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumCompGauss(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_12NumCompGauss_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumCompUnif(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumCompUnif(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_11NumCompUnif_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumComp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_7NumComp_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumComp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_7NumComp_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_1Z_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_1Z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_CurrentFrame(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_CurrentFrame(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_12CurrentFrame_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_KernelProcesses(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_KernelProcesses(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_15KernelProcesses_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumImageRows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumImageRows(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_12NumImageRows_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_NumImageColumns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_NumImageColumns(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_15NumImageColumns_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Dimension(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_9Dimension_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Dimension(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_9Dimension_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_3Min_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Min(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_3Min_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_3Min_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_3Max_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Max(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_3Max_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_3Max_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Noise(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_5Noise_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Noise(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_5Noise_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_5Noise_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Counter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_7Counter_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Counter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_7Counter_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_7Counter_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Pi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_2Pi_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Pi(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_2Pi_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_2Pi_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_LogDetC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_LogDetC(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_7LogDetC_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_Mu(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_2Mu_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_Mu(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_2Mu_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_2Mu_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_MuFore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_6MuFore_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_MuFore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_6MuFore_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_6MuFore_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_C(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_1C_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_C(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_1C_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_1C_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7CCodeBM_7ModelBM_InvC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7CCodeBM_7ModelBM_4InvC_1__get__(o);
}

static int __pyx_setprop_7CCodeBM_7ModelBM_InvC(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7CCodeBM_7ModelBM_4InvC_3__set__(o, v);
  }
  else {
    return __pyx_pw_7CCodeBM_7ModelBM_4InvC_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7CCodeBM_ModelBM[] = {
  {"clone", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_3clone, METH_NOARGS, 0},
  {"initializeBM_PYX", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_5initializeBM_PYX, METH_O, 0},
  {"updateBM_PYX", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_7updateBM_PYX, METH_VARARGS|METH_KEYWORDS, 0},
  {"aplica_transformacion6_PYX", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_9aplica_transformacion6_PYX, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7CCodeBM_7ModelBM_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7CCodeBM_ModelBM[] = {
  {(char *)"Log", __pyx_getprop_7CCodeBM_7ModelBM_Log, __pyx_setprop_7CCodeBM_7ModelBM_Log, (char *)0, 0},
  {(char *)"Epsilon", __pyx_getprop_7CCodeBM_7ModelBM_Epsilon, __pyx_setprop_7CCodeBM_7ModelBM_Epsilon, (char *)0, 0},
  {(char *)"H", __pyx_getprop_7CCodeBM_7ModelBM_H, __pyx_setprop_7CCodeBM_7ModelBM_H, (char *)0, 0},
  {(char *)"Den", __pyx_getprop_7CCodeBM_7ModelBM_Den, __pyx_setprop_7CCodeBM_7ModelBM_Den, (char *)0, 0},
  {(char *)"NumPatterns", __pyx_getprop_7CCodeBM_7ModelBM_NumPatterns, __pyx_setprop_7CCodeBM_7ModelBM_NumPatterns, (char *)0, 0},
  {(char *)"NumCompGauss", __pyx_getprop_7CCodeBM_7ModelBM_NumCompGauss, __pyx_setprop_7CCodeBM_7ModelBM_NumCompGauss, (char *)0, 0},
  {(char *)"NumCompUnif", __pyx_getprop_7CCodeBM_7ModelBM_NumCompUnif, __pyx_setprop_7CCodeBM_7ModelBM_NumCompUnif, (char *)0, 0},
  {(char *)"NumComp", __pyx_getprop_7CCodeBM_7ModelBM_NumComp, __pyx_setprop_7CCodeBM_7ModelBM_NumComp, (char *)0, 0},
  {(char *)"Z", __pyx_getprop_7CCodeBM_7ModelBM_Z, __pyx_setprop_7CCodeBM_7ModelBM_Z, (char *)0, 0},
  {(char *)"CurrentFrame", __pyx_getprop_7CCodeBM_7ModelBM_CurrentFrame, __pyx_setprop_7CCodeBM_7ModelBM_CurrentFrame, (char *)0, 0},
  {(char *)"KernelProcesses", __pyx_getprop_7CCodeBM_7ModelBM_KernelProcesses, __pyx_setprop_7CCodeBM_7ModelBM_KernelProcesses, (char *)0, 0},
  {(char *)"NumImageRows", __pyx_getprop_7CCodeBM_7ModelBM_NumImageRows, __pyx_setprop_7CCodeBM_7ModelBM_NumImageRows, (char *)0, 0},
  {(char *)"NumImageColumns", __pyx_getprop_7CCodeBM_7ModelBM_NumImageColumns, __pyx_setprop_7CCodeBM_7ModelBM_NumImageColumns, (char *)0, 0},
  {(char *)"Dimension", __pyx_getprop_7CCodeBM_7ModelBM_Dimension, __pyx_setprop_7CCodeBM_7ModelBM_Dimension, (char *)0, 0},
  {(char *)"Min", __pyx_getprop_7CCodeBM_7ModelBM_Min, __pyx_setprop_7CCodeBM_7ModelBM_Min, (char *)0, 0},
  {(char *)"Max", __pyx_getprop_7CCodeBM_7ModelBM_Max, __pyx_setprop_7CCodeBM_7ModelBM_Max, (char *)0, 0},
  {(char *)"Noise", __pyx_getprop_7CCodeBM_7ModelBM_Noise, __pyx_setprop_7CCodeBM_7ModelBM_Noise, (char *)0, 0},
  {(char *)"Counter", __pyx_getprop_7CCodeBM_7ModelBM_Counter, __pyx_setprop_7CCodeBM_7ModelBM_Counter, (char *)0, 0},
  {(char *)"Pi", __pyx_getprop_7CCodeBM_7ModelBM_Pi, __pyx_setprop_7CCodeBM_7ModelBM_Pi, (char *)0, 0},
  {(char *)"LogDetC", __pyx_getprop_7CCodeBM_7ModelBM_LogDetC, __pyx_setprop_7CCodeBM_7ModelBM_LogDetC, (char *)0, 0},
  {(char *)"Mu", __pyx_getprop_7CCodeBM_7ModelBM_Mu, __pyx_setprop_7CCodeBM_7ModelBM_Mu, (char *)0, 0},
  {(char *)"MuFore", __pyx_getprop_7CCodeBM_7ModelBM_MuFore, __pyx_setprop_7CCodeBM_7ModelBM_MuFore, (char *)0, 0},
  {(char *)"C", __pyx_getprop_7CCodeBM_7ModelBM_C, __pyx_setprop_7CCodeBM_7ModelBM_C, (char *)0, 0},
  {(char *)"InvC", __pyx_getprop_7CCodeBM_7ModelBM_InvC, __pyx_setprop_7CCodeBM_7ModelBM_InvC, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7CCodeBM_ModelBM = {
  PyVarObject_HEAD_INIT(0, 0)
  "CCodeBM.ModelBM", /*tp_name*/
  sizeof(struct __pyx_obj_7CCodeBM_ModelBM), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7CCodeBM_ModelBM, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7CCodeBM_ModelBM, /*tp_traverse*/
  __pyx_tp_clear_7CCodeBM_ModelBM, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7CCodeBM_ModelBM, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7CCodeBM_ModelBM, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7CCodeBM_7ModelBM_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7CCodeBM_ModelBM, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_CCodeBM(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_CCodeBM},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "CCodeBM",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CCodeBM, __pyx_k_CCodeBM, sizeof(__pyx_k_CCodeBM), 0, 0, 1, 1},
  {&__pyx_kp_s_CCodeBM_pyx, __pyx_k_CCodeBM_pyx, sizeof(__pyx_k_CCodeBM_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_C_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_C_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_C_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_Counter_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Counter_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Counter_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_FirstFrames, __pyx_k_FirstFrames, sizeof(__pyx_k_FirstFrames), 0, 0, 1, 1},
  {&__pyx_kp_s_FirstFrames_MUST_BE_A_FORTRAN_AR, __pyx_k_FirstFrames_MUST_BE_A_FORTRAN_AR, sizeof(__pyx_k_FirstFrames_MUST_BE_A_FORTRAN_AR), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x09, __pyx_k_Incompatible_checksums_s_vs_0x09, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x09), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_LogDetC_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_LogDetC_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_LogDetC_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_Max_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Max_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Max_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_Min_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Min_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Min_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_MuFore_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_MuFore_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_MuFore_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_Mu_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Mu_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Mu_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_s_Noise_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Noise_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Noise_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Pi_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_Pi_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_Pi_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_kp_s_R_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_R_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_R_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_arg0, __pyx_k_arg0, sizeof(__pyx_k_arg0), 0, 0, 1, 1},
  {&__pyx_kp_s_arg0_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_arg0_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_arg0_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_arg1, __pyx_k_arg1, sizeof(__pyx_k_arg1), 0, 0, 1, 1},
  {&__pyx_kp_s_arg1_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_arg1_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_arg1_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dims, __pyx_k_dims, sizeof(__pyx_k_dims), 0, 0, 1, 1},
  {&__pyx_n_s_extrae_transformacion_BF2_PYX, __pyx_k_extrae_transformacion_BF2_PYX, sizeof(__pyx_k_extrae_transformacion_BF2_PYX), 0, 0, 1, 1},
  {&__pyx_n_s_frameshape, __pyx_k_frameshape, sizeof(__pyx_k_frameshape), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_minHessian, __pyx_k_minHessian, sizeof(__pyx_k_minHessian), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nchannels, __pyx_k_nchannels, sizeof(__pyx_k_nchannels), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_objgridX, __pyx_k_objgridX, sizeof(__pyx_k_objgridX), 0, 0, 1, 1},
  {&__pyx_kp_s_objgridX_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_objgridX_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_objgridX_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_objgridY, __pyx_k_objgridY, sizeof(__pyx_k_objgridY), 0, 0, 1, 1},
  {&__pyx_kp_s_objgridY_MUST_BE_A_FORTRAN_ARRAY, __pyx_k_objgridY_MUST_BE_A_FORTRAN_ARRAY, sizeof(__pyx_k_objgridY_MUST_BE_A_FORTRAN_ARRAY), 0, 0, 1, 0},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ModelBM, __pyx_k_pyx_unpickle_ModelBM, sizeof(__pyx_k_pyx_unpickle_ModelBM), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ransacReproj, __pyx_k_ransacReproj, sizeof(__pyx_k_ransacReproj), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_tam_cols, __pyx_k_tam_cols, sizeof(__pyx_k_tam_cols), 0, 0, 1, 1},
  {&__pyx_n_s_tam_cols_ext, __pyx_k_tam_cols_ext, sizeof(__pyx_k_tam_cols_ext), 0, 0, 1, 1},
  {&__pyx_n_s_tam_cols_ini, __pyx_k_tam_cols_ini, sizeof(__pyx_k_tam_cols_ini), 0, 0, 1, 1},
  {&__pyx_n_s_tam_objgrid, __pyx_k_tam_objgrid, sizeof(__pyx_k_tam_objgrid), 0, 0, 1, 1},
  {&__pyx_n_s_tam_rows, __pyx_k_tam_rows, sizeof(__pyx_k_tam_rows), 0, 0, 1, 1},
  {&__pyx_n_s_tam_rows_ext, __pyx_k_tam_rows_ext, sizeof(__pyx_k_tam_rows_ext), 0, 0, 1, 1},
  {&__pyx_n_s_tam_rows_ini, __pyx_k_tam_rows_ini, sizeof(__pyx_k_tam_rows_ini), 0, 0, 1, 1},
  {&__pyx_kp_s_temp_txt, __pyx_k_temp_txt, sizeof(__pyx_k_temp_txt), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upright, __pyx_k_upright, sizeof(__pyx_k_upright), 0, 0, 1, 1},
  {&__pyx_n_s_wantOutput, __pyx_k_wantOutput, sizeof(__pyx_k_wantOutput), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 810, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1000, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "CCodeBM.pyx":104
 *   cdef public cnp.ndarray C, InvC #cnp.ndarray[cnp.float64_t, ndim=5, mode='fortran']
 * 
 *   def __init__(self, bool init=True, tuple frameshape=(0,0,0)):             # <<<<<<<<<<<<<<
 *     cdef cnp.npy_intp dims[5]
 *     if init:
 */
  __pyx_tuple_ = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "CCodeBM.pyx":217
 *     args.NumCompUnif = &(self.NumCompUnif)
 *     args.Den = &(self.Den)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_FirstFrames_MUST_BE_A_FORTRAN_AR); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "CCodeBM.pyx":218
 *     args.Den = &(self.Den)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Pi_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "CCodeBM.pyx":219
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Mu_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "CCodeBM.pyx":220
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_MuFore_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "CCodeBM.pyx":221
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_C_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "CCodeBM.pyx":222
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     cdef tuple shape = (<object>FirstFrames).shape
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Min_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "CCodeBM.pyx":223
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     cdef tuple shape = (<object>FirstFrames).shape
 *     cdef int s0 = shape[0]
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Max_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "CCodeBM.pyx":259
 *     args.Z = &(self.Z)
 *     args.Epsilon = &(self.Epsilon)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_FirstFrames_MUST_BE_A_FORTRAN_AR); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "CCodeBM.pyx":260
 *     args.Epsilon = &(self.Epsilon)
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Pi_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "CCodeBM.pyx":261
 *     if badArray(FirstFrames): raise IndexError('FirstFrames MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Mu_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "CCodeBM.pyx":262
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_MuFore_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "CCodeBM.pyx":263
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_C_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "CCodeBM.pyx":264
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_LogDetC_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "CCodeBM.pyx":265
 *     if badArray(self.C): raise IndexError('C MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Min_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "CCodeBM.pyx":266
 *     if badArray(self.LogDetC): raise IndexError('LogDetC MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Max_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "CCodeBM.pyx":267
 *     if badArray(self.Min): raise IndexError('Min MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Counter_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "CCodeBM.pyx":268
 *     if badArray(self.Max): raise IndexError('Max MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Noise): raise IndexError('Noise MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     args.arg1 = <cnp.float64_t *>FirstFrames.data
 *     args.Pi = <cnp.float64_t *>self.Pi.data
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Noise_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "CCodeBM.pyx":299
 *     cdef Args_aplica_transformacion6_MEX args
 *     cdef cnp.ndarray TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_objgridX_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "CCodeBM.pyx":300
 *     cdef cnp.ndarray TransMu_nD, TransMuFore_nD, TransCounter, TransR_nD, TransPi_nD, Corona
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_objgridY_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "CCodeBM.pyx":301
 *     if badArray(objgridX): raise IndexError('objgridX MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_R_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "CCodeBM.pyx":302
 *     if badArray(objgridY): raise IndexError('objgridY MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Mu_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "CCodeBM.pyx":303
 *     if badArray(R): raise IndexError('R MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_MuFore_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "CCodeBM.pyx":304
 *     if badArray(self.Mu): raise IndexError('Mu MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Pi_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "CCodeBM.pyx":305
 *     if badArray(self.MuFore): raise IndexError('MuFore MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Pi): raise IndexError('Pi MUST BE A FORTRAN ARRAY!!!!')
 *     if badArray(self.Counter): raise IndexError('Counter MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *     args.arg0 = <cnp.float64_t *>objgridX.data
 *     args.arg1 = <cnp.float64_t *>objgridY.data
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Counter_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "CCodeBM.pyx":352
 *   cdef Args_extrae_transformacion_BF2_MEX args
 *   cdef cnp.ndarray output
 *   if badArray(arg0): raise IndexError('arg0 MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')
 *   args.arg0 = <cnp.float64_t *>arg0.data
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_arg0_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "CCodeBM.pyx":353
 *   cdef cnp.ndarray output
 *   if badArray(arg0): raise IndexError('arg0 MUST BE A FORTRAN ARRAY!!!!')
 *   if badArray(arg1): raise IndexError('arg1 MUST BE A FORTRAN ARRAY!!!!')             # <<<<<<<<<<<<<<
 *   args.arg0 = <cnp.float64_t *>arg0.data
 *   args.arg1 = <cnp.float64_t *>arg1.data
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_arg1_MUST_BE_A_FORTRAN_ARRAY); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "CCodeBM.pyx":348
 * 
 * 
 * def extrae_transformacion_BF2_PYX(cnp.ndarray arg0, cnp.ndarray arg1, bool upright, int minHessian, double ransacReproj, int tam_cols, int tam_rows, int tam_cols_ext, int tam_rows_ext):             # <<<<<<<<<<<<<<
 *   cdef cnp.npy_intp dims[2]
 *   cdef Args_extrae_transformacion_BF2_MEX args
 */
  __pyx_tuple__37 = PyTuple_Pack(12, __pyx_n_s_arg0, __pyx_n_s_arg1, __pyx_n_s_upright, __pyx_n_s_minHessian, __pyx_n_s_ransacReproj, __pyx_n_s_tam_cols, __pyx_n_s_tam_rows, __pyx_n_s_tam_cols_ext, __pyx_n_s_tam_rows_ext, __pyx_n_s_dims, __pyx_n_s_args, __pyx_n_s_output); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(9, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_CCodeBM_pyx, __pyx_n_s_extrae_transformacion_BF2_PYX, 348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 348, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__39 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ModelBM, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10392827 = PyInt_FromLong(10392827L); if (unlikely(!__pyx_int_10392827)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7CCodeBM_ModelBM) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_type_7CCodeBM_ModelBM.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7CCodeBM_ModelBM.tp_dictoffset && __pyx_type_7CCodeBM_ModelBM.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7CCodeBM_ModelBM.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "ModelBM", (PyObject *)&__pyx_type_7CCodeBM_ModelBM) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7CCodeBM_ModelBM) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_ptype_7CCodeBM_ModelBM = &__pyx_type_7CCodeBM_ModelBM;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 164, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 186, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 872, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__)
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initCCodeBM(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initCCodeBM(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_CCodeBM(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_CCodeBM(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_CCodeBM(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_CCodeBM(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("CCodeBM", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_CCodeBM) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "CCodeBM")) {
      if (unlikely(PyDict_SetItemString(modules, "CCodeBM", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "CCodeBM.pyx":4
 * 
 * cimport numpy as cnp
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cnp.import_array()
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CCodeBM.pyx":6
 * import numpy as np
 * 
 * cnp.import_array()             # <<<<<<<<<<<<<<
 * 
 * from libcpp cimport bool
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 6, __pyx_L1_error)

  /* "CCodeBM.pyx":348
 * 
 * 
 * def extrae_transformacion_BF2_PYX(cnp.ndarray arg0, cnp.ndarray arg1, bool upright, int minHessian, double ransacReproj, int tam_cols, int tam_rows, int tam_cols_ext, int tam_rows_ext):             # <<<<<<<<<<<<<<
 *   cdef cnp.npy_intp dims[2]
 *   cdef Args_extrae_transformacion_BF2_MEX args
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7CCodeBM_1extrae_transformacion_BF2_PYX, NULL, __pyx_n_s_CCodeBM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extrae_transformacion_BF2_PYX, __pyx_t_1) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ModelBM(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x09e94fb:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7CCodeBM_3__pyx_unpickle_ModelBM, NULL, __pyx_n_s_CCodeBM); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ModelBM, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CCodeBM.pyx":1
 * # CCode.pyx             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as cnp
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../miniconda2/envs/cspyder/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init CCodeBM", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CCodeBM");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
      static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
      #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
      #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
      #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
      #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
